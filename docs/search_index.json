[
["index.html", "R, Databases and Docker Chapter 1 Introduction 1.1 Why integrate R with databases using Docker? 1.2 Who are we? 1.3 Prerequisites", " R, Databases and Docker M. Edward (Ed) Borasky, editor 2018-09-05 Chapter 1 Introduction 1.1 Why integrate R with databases using Docker? Large data stores in organizations are stored in databases that have specific access constraints and structural characteristics. Learning to navigate the gap between R and the database is difficult to simulate outside corporate walls. R users frequently need to make sense of complex data structures using diagnostic techniques that shuld not be reinvented (and so would benefit from more public instruction and commentary). Docker is a relatively easy way to simulate the relationship between an R/Rstudio session and database – all on on a single machine. 1.2 Who are we? M. Edward (Ed) Borasky - @znmeb John David Smith - @smithjd Scott Came - @scottcame Ian Franz - @ianfrantz Sophie Yang - @SophieMYang Jim Tyhurst - @jimtyhurst 1.3 Prerequisites You will need A computer running Windows, MacOS, or Linux. Any Linux distro that will run Docker Community Edition, R and RStudio will work, R, and Docker hosting. The database we use is PostgreSQL 10, but you do not need to install that - it’s installed via a Docker image. RStudio 1.2 is highly recommended but not required. "],
["docker-hosting-for-windows.html", "Chapter 2 Docker Hosting for Windows 2.1 Hardware requirements 2.2 Software requirements 2.3 Docker for Windows settings 2.4 Git, GitHub and line endings", " Chapter 2 Docker Hosting for Windows 2.1 Hardware requirements You will need an Intel or AMD processor with 64-bit hardware and the hardware virtualization feature. Most machines you buy today will have that, but older ones may not. You will need to go into the BIOS / firmware and enable the virtualization feature. You will need at least 4 gigabytes of RAM! 2.2 Software requirements You will need Windows 7 64-bit or later. If you can afford it, I highly recommend upgrading to Windows 10 Pro. 2.2.1 Windows 7, 8, 8.1 and Windows 10 Home (64 bit) Install Docker Toolbox. The instructions are here: https://docs.docker.com/toolbox/toolbox_install_windows/. Make sure you try the test cases and they work! 2.2.2 Windows 10 Pro Install Docker for Windows stable. The instructions are here: https://docs.docker.com/docker-for-windows/install/#start-docker-for-windows. Again, make sure you try the test cases and they work. 2.3 Docker for Windows settings 2.3.1 Shared drives If you’re going to mount host files into container filesystems, you need to set up shared drives. Open the Docker settings dialog and select Shared Drives. Check the drives you want to share. In this screenshot, the D: drive is my 1 terabyte hard drive. 2.3.2 Kubernetes Kubernetes is a container orchestration / cloud management package that’s a major DevOps tool. It’s heavily supported by Red Hat and Google, and as a result is becoming a required skill for DevOps. However, it’s overkill for this project at the moment, and it doesn’t seem to be compatible with the Docker Compose we’re using. So you should make sure it’s not enabled. Go to the Kubernetes dialog and make sure the Enable Kubernetes checkbox is cleared. 2.4 Git, GitHub and line endings Git was originally developed for Linux - in fact, it was created by Linus Torvalds to manage hundreds of different versions of the Linux kernel on different machines all around the world. As usage has grown, it’s achieved a huge following and is the version control system used by most large open source projects. If you’re on Windows, there are some things about Git and GitHub you need to watch. First of all, there are quite a few tools for running Git on Windows, but the RStudio default and recommended one is Git for Windows (https://git-scm.com/download/win). By default, text files on Linux end with a single linefeed (\\n) character. But on Windows, text files end with a carriage return and a line feed (\\r\\n). See https://en.wikipedia.org/wiki/Newline for the gory details. Git defaults to checking files out in the native mode. So if you’re on Linux, a text file will show up with the Linux convention, and if you’re on Windows, it will show up with the Windows convention. Most of the time this doesn’t cause any problems. But Docker containers usually run Linux, and if you have files from a repository on Windows that you’ve sent to the container, the container may malfunction or give weird results. In particular, executable sh or bash scripts will fail in a Docker container if they have Windows line endings. You may see an error message with \\r in it, which means the shell saw the carriage return (\\r) and gave up. But often you’ll see no hint at all what the problem was. So you need a way to tell Git that some files need to be checked out with Linux line endings. See https://help.github.com/articles/dealing-with-line-endings/ for the details. Summary: You’ll need a .gitattributes file in the root of the repository. In that file, all text files (scripts, program source, data, etc.) that are destined for a Docker container will need to have the designator &lt;spec&gt; text eol=lf, where &lt;spec&gt; is the file name specifier, for example, *.sh. "],
["learning-goals-and-use-cases.html", "Chapter 3 Learning Goals and Use Cases 3.1 Context: Why integrate R with databases using Docker? 3.2 Learning Goals 3.3 Use cases", " Chapter 3 Learning Goals and Use Cases 3.1 Context: Why integrate R with databases using Docker? Large data stores in organizations are stored in databases that have specific access constraints and structural characteristics. Learning to navigate the gap between R and the database is difficult to simulate outside corporate walls. R users frequently need to make sense of complex data structures using diagnostic techniques that shuld not be reinvented (and so would benefit from more public instruction and commentary). Docker is a relatively easy way to simulate the relationship between an R/Rstudio session and database – all on on a single machine. 3.2 Learning Goals After working through this tutorial, you can expect to be able to: Run queries against Postgres in an environment that simulates what you will find in a corporate setting. Understand some of the tradeoffs between queries aimed at exploration or informal investigation using dplyr and those where performance is important because of the size of the database or the frequency with which a query is run. You will be able to rewrite dplyr queries as SQL and submit them directly. You will have some understanding of techniques for assessing query structure and performance. Set up a Postgres database in a Docker enviornment and understand enough about Docker to swap databases, swap DBMS’ (e.g., MySQL for Postgres, etc.) 3.3 Use cases Imagine that you have one of several roles at DVDs R Us and that you need to: As a data scientist, I want to know the distribution of number of rentals per month per customer, so that the Marketing department can create incentives for customers in 3 segments: Frequent Renters, Average Renters, Infrequent Renters. As the Director of Sales, I want to see the total number of rentals per month for the past 6 months and I want to know how fast our customer base is growing/shrinking per month for the past 6 months. As the Director of Marketing, I want to know which categories of DVDs are the least popular, so that I can create a campaign to draw attention to rarely used inventory. As a shipping clerk, I want to add rental information when I fulfill a shipment order. As the Director of Analytics, you want to test as much of the production R code in my shop against a new release of the DBMS that the IT department is implementing next month. etc. "],
["references.html", "References", " References "]
]
