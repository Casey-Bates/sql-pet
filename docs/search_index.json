[
["chapter-writing-to-the-dbms.html", "Chapter 24 Writing to the DBMS 24.1 Set up a cattle container 24.2 Interact with PostgreSQL 24.3 Clean up", " Chapter 24 Writing to the DBMS This chapter demonstrates how to: Set up and connect to a cattle database Create, modify, and remove a table. In a corporate setting, you may be creating your own tables or modifying existing tables less frequently than retrieving data. Nevertheless, in our sandbox you can easily do so. The following packages are used in this chapter: library(tidyverse) library(DBI) library(RPostgres) require(knitr) library(sqlpetr) 24.1 Set up a cattle container Check that Docker is up and running: sp_check_that_docker_is_up() ## [1] &quot;Docker is up but running no containers&quot; 24.1.1 Remove previous containers if they exist Remove the cattle and sql-pet containers if they exist (e.g., from prior experiments). sp_docker_remove_container(&quot;cattle&quot;) ## [1] 0 sp_docker_remove_container(&quot;sql-pet&quot;) ## [1] 0 Create a new cattle container: sp_make_simple_pg(&quot;cattle&quot;) Show that we’re ready to connect: sp_check_that_docker_is_up() ## [1] &quot;Docker is up, running these containers:&quot; ## [2] &quot;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES&quot; ## [3] &quot;ed1d3f62c35c postgres:10 \\&quot;docker-entrypoint.s…\\&quot; 1 second ago Up Less than a second 0.0.0.0:5432-&gt;5432/tcp cattle&quot; 24.1.2 Connect to PostgreSQL Connect to PostgreSQL using the sp_get_postgres_connection function: con &lt;- sp_get_postgres_connection(user = &quot;postgres&quot;, password = &quot;postgres&quot;, dbname = &quot;postgres&quot;, seconds_to_test = 30) 24.2 Interact with PostgreSQL Check on the contents of the database. DBI::dbListTables(con) ## character(0) It does not contain any tables yet. 24.2.1 Create a new table in the database This is an example from the DBI help file using the “cars” built-in dataset, not to be confused with mtcars: dbWriteTable(con, &quot;cars&quot;, head(cars, 3)) # The cars table has 3 rows: dbReadTable(con, &quot;cars&quot;) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 24.2.2 Modify an existing table To add additional rows or instances to the “cars” table, we will use INSERT command with their values. There are two different ways of adding values: list them or pass values using the param argument. dbExecute( con, &quot;INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)&quot; ) ## [1] 3 Now it has 6 rows: dbReadTable(con, &quot;cars&quot;) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 ## 4 1 1 ## 5 2 2 ## 6 3 3 Pass values using the param argument: dbExecute( con, &quot;INSERT INTO cars (speed, dist) VALUES ($1, $2)&quot;, param = list(4:7, 5:8) ) ## [1] 4 Now there are 10 rows: dbReadTable(con, &quot;cars&quot;) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 ## 4 1 1 ## 5 2 2 ## 6 3 3 ## 7 4 5 ## 8 5 6 ## 9 6 7 ## 10 7 8 24.2.3 Remove the table Remove the “cars” table. dbRemoveTable(con, &quot;cars&quot;) 24.3 Clean up Disconnect from the database: dbDisconnect(con) Stop the cattle container, but leave it around for future use. sp_docker_stop(&quot;cattle&quot;) "]
]
