[
["joins-and-complex-queries-13.html", "Chapter 10 Joins and complex queries (13) 10.1 Joins 10.2 Store analysis 10.3 Store analysis 10.4 Different strategies for interacting with the database", " Chapter 10 Joins and complex queries (13) Verify Docker is up and running: sp_check_that_docker_is_up() ## [1] &quot;Docker is up, running these containers:&quot; ## [2] &quot;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES&quot; ## [3] &quot;6c75f8c9c9d2 postgres-dvdrental \\&quot;docker-entrypoint.s…\\&quot; 41 hours ago Up 18 hours 0.0.0.0:5432-&gt;5432/tcp sql-pet&quot; verify pet DB is available, it may be stopped. sp_show_all_docker_containers() ## [1] &quot;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES&quot; ## [2] &quot;6c75f8c9c9d2 postgres-dvdrental \\&quot;docker-entrypoint.s…\\&quot; 41 hours ago Up 18 hours 0.0.0.0:5432-&gt;5432/tcp sql-pet&quot; Start up the docker-pet container sp_docker_start(&quot;sql-pet&quot;) now connect to the database with R # need to wait for Docker &amp; Postgres to come up before connecting. con &lt;- sp_get_postgres_connection(user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), dbname = &quot;dvdrental&quot;, seconds_to_test = 10) discuss this simple example? http://www.postgresqltutorial.com/postgresql-left-join/ dplyr joins on the server side Where you put (collect(n = Inf)) really matters 10.1 Joins Anti joins 10.1.1 Union 10.1.1.1 how many films and languages exist in the DVD rental application JDS Note: to me this doesn’t show a useful application of union. film_table &lt;- dplyr::tbl(con, &quot;film&quot;) language_table &lt;- dplyr::tbl(con, &quot;language&quot;) rs_dplyr &lt;- union( film_table %&gt;% count %&gt;% mutate(table_name = &quot;film&quot;), language_table %&gt;% count %&gt;% mutate(table_name = &quot;language&quot;) ) %&gt;% collect(n = Inf) %&gt;% rename(count = n) head(rs_dplyr) ## # A tibble: 2 x 2 ## count table_name ## &lt;S3: integer64&gt; &lt;chr&gt; ## 1 &quot; 6&quot; language ## 2 1000 film rs &lt;- dbGetQuery(con, &quot; select &#39;film&#39; table_name, count(*) count from film union select &#39;language&#39; table_name, count(*) count from language ; &quot; ) head(rs) ## table_name count ## 1 film 1000 ## 2 language 6 10.1.1.2 what is the film distribution based on language rs_dplyr &lt;- film_table %&gt;% count(language_id) %&gt;% right_join(language_table, by = c(&quot;language_id&quot; = &quot;language_id&quot;)) %&gt;% select(language_id, name, n) %&gt;% collect(n = Inf) head(rs_dplyr) ## # A tibble: 6 x 3 ## language_id name n ## &lt;int&gt; &lt;chr&gt; &lt;S3: integer64&gt; ## 1 1 &quot;English &quot; 1000 ## 2 2 &quot;Italian &quot; &quot; NA&quot; ## 3 3 &quot;Japanese &quot; &quot; NA&quot; ## 4 4 &quot;Mandarin &quot; &quot; NA&quot; ## 5 5 &quot;French &quot; &quot; NA&quot; ## 6 6 &quot;German &quot; &quot; NA&quot; rs &lt;- dbGetQuery(con, &quot;select l.language_id id ,l.name ,sum(case when f.language_id is not null then 1 else 0 end) total from language l full outer join film f on l.language_id = f.language_id group by l.language_id, l.name order by l.name; ; &quot; ) head(rs) ## id name total ## 1 1 English 1000 ## 2 5 French 0 ## 3 6 German 0 ## 4 2 Italian 0 ## 5 3 Japanese 0 ## 6 4 Mandarin 0 10.2 Store analysis 10.2.1 which store has had more rentals and income rs &lt;- dbGetQuery(con, &quot;select * from ( select &#39;actor&#39; tbl_name,count(*) from actor union select &#39;category&#39; tbl_name,count(*) from category union select &#39;film&#39; tbl_name,count(*) from film union select &#39;film_actor&#39; tbl_name,count(*) from film_actor union select &#39;film_category&#39; tbl_name,count(*) from film_category union select &#39;language&#39; tbl_name,count(*) from language union select &#39;inventory&#39; tbl_name,count(*) from inventory union select &#39;rental&#39; tbl_name,count(*) from rental union select &#39;payment&#39; tbl_name,count(*) from payment union select &#39;staff&#39; tbl_name,count(*) from staff union select &#39;customer&#39; tbl_name,count(*) from customer union select &#39;address&#39; tbl_name,count(*) from address union select &#39;city&#39; tbl_name,count(*) from city union select &#39;country&#39; tbl_name,count(*) from country union select &#39;store&#39; tbl_name,count(*) from store ) counts order by tbl_name ; &quot; ) head(rs) ## tbl_name count ## 1 actor 200 ## 2 address 603 ## 3 category 16 ## 4 city 600 ## 5 country 109 ## 6 customer 599 10.3 Store analysis 10.3.1 which store has the largest income stream? rs &lt;- dbGetQuery(con, &quot;select store_id,sum(amount) amt,count(*) cnt from payment p join staff s on p.staff_id = s.staff_id group by store_id order by 2 desc ; &quot; ) sp_print_df(head(rs)) 10.3.2 How many rentals have not been paid 10.3.3 How many rentals have been paid 10.3.4 How much has been paid 10.3.5 What is the average price/movie 10.3.6 Estimate the outstanding balance rs &lt;- dbGetQuery(con, &quot;select sum(case when payment_id is null then 1 else 0 end) missing ,sum(case when payment_id is not null then 1 else 0 end) found ,sum(p.amount) amt ,count(*) cnt ,round(sum(p.amount)/sum(case when payment_id is not null then 1 else 0 end),2) avg_price ,round(round(sum(p.amount)/sum(case when payment_id is not null then 1 else 0 end),2) * sum(case when payment_id is null then 1 else 0 end),2) est_balance from rental r left outer join payment p on r.rental_id = p.rental_id ; &quot; ) sp_print_df(head(rs)) 10.3.7 what is the actual outstanding balance rs &lt;- dbGetQuery(con, &quot;select sum(f.rental_rate) open_amt,count(*) count from rental r left outer join payment p on r.rental_id = p.rental_id join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id where p.rental_id is null ;&quot; ) sp_print_df(head(rs)) 10.3.8 Rank customers with highest open amounts rs &lt;- dbGetQuery(con, &quot;select c.customer_id,c.first_name,c.last_name,sum(f.rental_rate) open_amt,count(*) count from rental r left outer join payment p on r.rental_id = p.rental_id join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id join customer c on r.customer_id = c.customer_id where p.rental_id is null group by c.customer_id,c.first_name,c.last_name order by open_amt desc limit 25 ;&quot; ) sp_print_df(head(rs)) ### what film has been rented the most rs &lt;- dbGetQuery(con, &quot;select i.film_id,f.title,rental_rate,sum(rental_rate) revenue,count(*) count --16044 from rental r join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id group by i.film_id,f.title,rental_rate order by count desc ;&quot; ) sp_print_df(head(rs)) 10.3.9 what film has been generated the most revenue assuming all amounts are collected rs &lt;- dbGetQuery(con, &quot;select i.film_id,f.title,rental_rate ,sum(rental_rate) revenue,count(*) count --16044 from rental r join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id group by i.film_id,f.title,rental_rate order by revenue desc ;&quot; ) sp_print_df(head(rs)) 10.3.10 which films are in one store but not the other. rs &lt;- dbGetQuery(con, &quot;select coalesce(i1.film_id,i2.film_id) film_id ,f.title,f.rental_rate,i1.store_id,i1.count,i2.store_id,i2.count from (select film_id,store_id,count(*) count from inventory where store_id = 1 group by film_id,store_id) as i1 full outer join (select film_id,store_id,count(*) count from inventory where store_id = 2 group by film_id,store_id ) as i2 on i1.film_id = i2.film_id join film f on coalesce(i1.film_id,i2.film_id) = f.film_id where i1.film_id is null or i2.film_id is null order by f.title ; &quot; ) sp_print_df(head(rs)) 10.3.11 Compute the outstanding balance. rs &lt;- dbGetQuery(con, &quot;select sum(f.rental_rate) open_amt,count(*) count from rental r left outer join payment p on r.rental_id = p.rental_id join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id where p.rental_id is null ;&quot; ) sp_print_df(head(rs)) 10.4 Different strategies for interacting with the database select examples dbGetQuery returns the entire result set as a data frame. For large returned datasets, complex or inefficient SQL statements, this may take a long time. dbSendQuery: parses, compiles, creates the optimized execution plan. dbFetch: Execute optimzed execution plan and return the dataset. dbClearResult: remove pending query results from the database to your R environment 10.4.1 Use dbGetQuery How many customers are there in the DVD Rental System rs1 &lt;- dbGetQuery(con, &#39;select * from customer;&#39;) sp_print_df(head(rs1)) pco &lt;- dbSendQuery(con, &#39;select * from customer;&#39;) rs2 &lt;- dbFetch(pco) dbClearResult(pco) sp_print_df(head(rs2)) 10.4.2 Use dbExecute # insert yourself as a new customer dbExecute(con, &quot;insert into customer (store_id,first_name,last_name,email,address_id ,activebool,create_date,last_update,active) values(2,&#39;Sophie&#39;,&#39;Yang&#39;,&#39;dodreamdo@yahoo.com&#39;,1,TRUE,&#39;2018-09-13&#39;,&#39;2018-09-13&#39;,1) returning customer_id; &quot; ) ## [1] 0 10.4.3 anti join – Find sophie who have never rented a movie. rs &lt;- dbGetQuery(con, &quot;select c.first_name ,c.last_name ,c.email from customer c left outer join rental r on c.customer_id = r.customer_id where r.rental_id is null; &quot; ) sp_print_df(head(rs)) # diconnect from the db dbDisconnect(con) sp_docker_stop(&quot;sql-pet&quot;) ## [1] &quot;sql-pet&quot; knitr::knit_exit() "]
]
