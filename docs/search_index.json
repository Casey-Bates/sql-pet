[
["chapter-sql-joins-exercises.html", "Chapter 18 SQL Joins exercises", " Chapter 18 SQL Joins exercises This chapter demonstrates how to: Use primary and foreign keys to retrieve specific rows of a table do different kinds of join queries Exercises Query the database to get basic information about each dvdrental story How to interact with the database using different strategies Parameterized table description function Parameterized table primary foreign keys function The DVD rental database data is too clean to demonstrate some join concepts. To dirty the data, this chapter performs a number of database operations on tables that a data analyst is typically restricted from doing. Deleting records from tables. Inserting records from tables. Enabling and disabling table constraints. In your Docker environment, you have all database privledges. . blue &lt;- function(x) { # x string # color outputFormat = knitr::opts_knit$get(&quot;rmarkdown.pandoc.to&quot;) if(outputFormat == &#39;html&#39;) paste(&#39;&lt;style&gt;div.blue &#39; ,&#39;{ background-color:#e6f0ff; border-radius: 5px; padding:20px;}&#39; ,&#39;&lt;/style&gt;&#39; ,&#39;&lt;div class = &quot;blue&quot;&gt;&#39; ,x ,&#39;&lt;/div&gt;&#39; ,sep=&#39;&#39; ) else x } Verify Docker is up and running: sp_check_that_docker_is_up() ## [1] &quot;Docker is up but running no containers&quot; Verify pet DB is available, it may be stopped. sp_show_all_docker_containers() ## CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ## 73422e24c530 postgres-dvdrental &quot;docker-entrypoint.sâ€¦&quot; 2 minutes ago Exited (0) 2 minutes ago sql-pet Start up the docker-pet container sp_docker_start(&quot;sql-pet&quot;) Now connect to the database with R # need to wait for Docker &amp; Postgres to come up before connecting. con &lt;- sp_get_postgres_connection( user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), dbname = &quot;dvdrental&quot;, seconds_to_test = 30 ) The following code block deletes and inserts records into the different tables used in the exercises in this chpater. The techniques used in this code block are discussed in detail in the appendix, ??add link here.?? source(file = here(&#39;book-src/sql_pet_data.R&#39;),echo = TRUE) ## ## &gt; dbExecute(con, &quot;delete from film_category where film_id &gt;= 1001;&quot;) ## [1] 0 ## ## &gt; dbExecute(con, &quot;delete from rental where rental_id &gt;= 16050;&quot;) ## [1] 0 ## ## &gt; dbExecute(con, &quot;delete from inventory where film_id &gt;= 1001;&quot;) ## [1] 0 ## ## &gt; dbExecute(con, &quot;delete from film where film_id &gt;= 1001;&quot;) ## [1] 0 ## ## &gt; dbExecute(con, &quot;delete from customer where customer_id &gt;= 600;&quot;) ## [1] 0 ## ## &gt; dbExecute(con, &quot;delete from store where store_id &gt; 2;&quot;) ## [1] 0 ## ## &gt; dbExecute(con, &quot;insert into customer\\n (customer_id,store_id,first_name,last_name,email,address_id,activebool\\n ,create_date,last_update,active)\\n ...&quot; ... [TRUNCATED] ## [1] 5 ## ## &gt; dbExecute(con, &quot;ALTER TABLE store DISABLE TRIGGER ALL;&quot;) ## [1] 0 ## ## &gt; df &lt;- data.frame(store_id = 10, manager_staff_id = 10, ## + address_id = 10, last_update = Sys.time()) ## ## &gt; dbWriteTable(con, &quot;store&quot;, value = df, append = TRUE, ## + row.names = FALSE) ## ## &gt; dbExecute(con, &quot;ALTER TABLE store ENABLE TRIGGER ALL;&quot;) ## [1] 0 ## ## &gt; dbExecute(con, &quot;insert into film\\n (film_id,title,description,release_year,language_id\\n ,rental_duration,rental_rate,length,replacement_cost,rati ...&quot; ... [TRUNCATED] ## [1] 1 ## ## &gt; dbExecute(con, &quot;insert into film_category\\n (film_id,category_id,last_update)\\n values(1001,6,now()::date)\\n ,(1001,7,now()::date)\\n ;&quot;) ## [1] 2 ## ## &gt; dbExecute(con, &quot;insert into inventory\\n (inventory_id,film_id,store_id,last_update)\\n values(4582,1001,1,now()::date)\\n ,(4583,1001,2,now()::date ...&quot; ... [TRUNCATED] ## [1] 2 ## ## &gt; dbExecute(con, &quot;insert into rental\\n (rental_id,rental_date,inventory_id,customer_id,return_date,staff_id,last_update)\\n values(16050,now()::date ...&quot; ... [TRUNCATED] ## [1] 1 "],
["sql-union-exercise.html", "Chapter 19 SQL Union Exercise 19.1 1. How many rows are in each table? 19.2 Exercises 19.3 30. What is the business cash flow? 19.4 Different strategies for interacting with the database", " Chapter 19 SQL Union Exercise When joining many tables, it is helpful to have the number of rows from each table as an initial sanity check that the joins are returning a reasonable number of rows. 19.1 1. How many rows are in each table? table_rows_sql &lt;- dbGetQuery( con, &quot;select * from ( select &#39;actor&#39; tbl_name,count(*) from actor union select &#39;category&#39; tbl_name,count(*) from category union select &#39;film&#39; tbl_name,count(*) from film union select &#39;film_actor&#39; tbl_name,count(*) from film_actor union select &#39;film_category&#39; tbl_name,count(*) from film_category union select &#39;language&#39; tbl_name,count(*) from language union select &#39;inventory&#39; tbl_name,count(*) from inventory union select &#39;rental&#39; tbl_name,count(*) from rental union select &#39;payment&#39; tbl_name,count(*) from payment union select &#39;staff&#39; tbl_name,count(*) from staff union select &#39;customer&#39; tbl_name,count(*) from customer union select &#39;address&#39; tbl_name,count(*) from address union select &#39;city&#39; tbl_name,count(*) from city union select &#39;country&#39; tbl_name,count(*) from country union select &#39;store&#39; tbl_name,count(*) from store ) counts order by tbl_name ; &quot; ) sp_print_df(table_rows_sql) 19.1.0.1 Replicate the output above using dplyr syntax. 19.2 Exercises 19.2.1 1. Where is the DVD Rental Business located? To answer this question we look at the store, address, city, and country tables to answer this question. store_locations_sql &lt;- dbGetQuery(con, &quot;select s.store_id ,a.address ,c.city ,a.district ,a.postal_code ,c2.country ,s.last_update from store s join address a on s.address_id = a.address_id join city c on a.city_id = c.city_id join country c2 on c.country_id = c2.country_id &quot;) sp_print_df(store_locations_sql) Our DVD Rental business is international and operates in three countries, Canada, Austraila, and the United States. Each country has one store. 19.2.1.1 Replicate the output above using dplyr syntax. 19.2.2 2. List Each Store and the Staff Contact Information? To answer this question we look at the store, staff, address, city, and country tables. store_employees_sql &lt;- dbGetQuery(con, &quot;select st.store_id ,s.first_name ,s.last_name ,s.email ,a.phone ,a.address ,c.city ,a.district ,a.postal_code ,c2.country from store st left join staff s on st.manager_staff_id = s.staff_id left join address a on s.address_id = a.address_id left join city c on a.city_id = c.city_id left join country c2 on c.country_id = c2.country_id &quot;) sp_print_df(store_employees_sql) Our DVD Rental business is international and operates in three countries, Canada, Austraila, and the United States. Each country has one store. The stores in Canada and Austrailia have one employee each, Mike Hillyer and Jon Stephens respectively. The store in the United States has no employees yet. 19.2.2.1 Replicate the output above using dplyr syntax. 19.2.3 3. How Many Active, Inactive, and Total Customers Does the DVD Rental Business Have? To answer this question we look at the customer table. In a previous chapter we observed that there are two columns, activebool and active. We consider active = 1 as active. customer_cnt_sql &lt;- dbGetQuery(con, &quot;SELECT sum(case when active = 1 then 1 else 0 end) active ,sum(case when active = 0 then 1 else 0 end) inactive ,count(*) total from customer &quot;) sp_print_df(customer_cnt_sql) Our DVD Rental business is international and operates in three countries, Canada, Austraila, and the United States. Each country has one store. The stores in Canada and Austrailia have one employee each. The store in the United States has no employees yet. The business has 604 international customers, 589 are active and 15 inactive. 19.2.3.1 Replicate the output above using dplyr syntax. 19.2.4 4. How Many and What Percent of Customers Are From Each Country? To answer this question we look at the customer, address, city, and country tables. customers_sql &lt;- dbGetQuery(con, &quot;select c.active,country.country,count(*) count ,round(100 * count(*) / sum(count(*)) over(),4) as pct from customer c join address a on c.address_id = a.address_id join city on a.city_id = city.city_id join country on city.country_id = country.country_id group by c.active,country order by count(*) desc &quot;) sp_print_df(customers_sql) Based on the table above, the DVD Rental business has customers in 118 countries. The DVD Rental business cannot have many walk in customers. It may possibly use a mail order distribution model. For an international company, how are the different currencies converted to a standard currency? Looking at the ERD, there is no currency conversion rate. 19.2.4.1 Replicate the output above using dplyr syntax. 19.2.5 5 What Countries Constitute the Top 25% of the Customer Base? Using the previous code, add two new columns. One column shows a running total and the second column shows a running percentage. To answer this question we look at the customer, address, city, and country tables again. customers_sql &lt;- dbGetQuery(con, &quot;select active,country,count ,sum(count) over (order by count desc rows between unbounded preceding and current row) running_total , pct ,sum(pct) over (order by pct desc rows between unbounded preceding and current row) running_pct from (-- Start of inner SQL Block select c.active,country.country,count(*) count ,round(100 * count(*) / sum(count(*)) over(),4) as pct from customer c join address a on c.address_id = a.address_id join city on a.city_id = city.city_id join country on city.country_id = country.country_id group by c.active,country ) ctry -- End of inner SQL Block order by count desc &quot;) sp_print_df(customers_sql) The top 25% of the customer base are from India, China, the United States, and Japan. The next six countries, the top 10, Mexico, Brazil, Russian Federation, Philipines, Indonesia, and Turkey round out the top 50% of the businesses customer base. 19.2.5.1 Replicate the output above using dplyr syntax. 19.2.6 6. How many customers are in Australia and Canada? customers_sql %&gt;% filter(country == &#39;Australia&#39; | country == &#39;Canada&#39;) ## active country count running_total pct running_pct ## 1 1 Canada 8 369 1.3245 61.0928 ## 2 1 Australia 2 524 0.3311 86.7551 The two countries with a store with an employee have less the 2% of the businessâ€™ customer base world wide. 19.2.7 7. How Many Languages? With an international customer base, how many languages does the DVD Rental business distribute DVDâ€™s in. To answer this question we look at the language table. languages_sql &lt;- dbGetQuery(con, &quot; select * from language &quot;) sp_print_df(languages_sql) DVDâ€™s are distributed in six languages. 19.2.7.1 Replicate the output above using dplyr syntax. 19.2.8 8. What is the distribution of DVDâ€™s by Language To answer this question we look at the language and film tables. language_distribution_sql &lt;- dbGetQuery(con, &#39; select l.language_id,name &quot;language&quot;,count(f.film_id) from language l left join film f on l.language_id = f.language_id group by l.language_id,name order by l.language_id &#39;) sp_print_df(language_distribution_sql) This is a surprise. For an international customer base, the entire stock of 1001 DVDâ€™s are in English only. 19.2.8.1 Replicate the output above using dplyr syntax. 19.2.9 9. What are the number of rentals and rented amount by store, by month? To answer this question we look at the rental, inventory, and film tables to answer this question. film_rank_sql &lt;- dbGetQuery(con, &quot;select * ,sum(rental_amt) over (order by yyyy_mm,store_id rows between unbounded preceding and current row) running_rental_amt from (select yyyy_mm,store_id,rentals,rental_amt ,sum(rentals) over(partition by yyyy_mm order by store_id) mo_rentals ,sum(rental_amt) over (partition by yyyy_mm order by store_id) mo_rental_amt from (select to_char(rental_date,&#39;yyyy-mm&#39;) yyyy_mm ,i.store_id,count(*) rentals, sum(f.rental_rate) rental_amt from rental r join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id group by to_char(rental_date,&#39;yyyy-mm&#39;),i.store_id ) as details ) as mo_running order by yyyy_mm,store_id &quot;) sp_print_df(film_rank_sql) We have data for five periods. The first four months from 2005-05 to 2005-08 the business is booming. It started off with 1156 rentals with recievables of 3388.44. The next month, 2005-06, the rentals doubled, 2311 rentals with recievables of 6775.89. The third month, 2005-07, the rentals nearly tripled from the previous month, 6709 rentals with recievables of of 19775.91. The fourth month, 2005-08, the rentals dropped 16% to 5686 with recievables of 16757.14. The fifth period, is 6 months later and the business has dropped below the opening month. In 2006-02 the business only had 182 rentals with recievables of 514.18. It is unclear what currency the rental receivables are in. The current entry is our new rental row we added to show the different joins in a previous chapter. 19.2.10 10. Rank Films Based on the Number of Times Rented and Associated Revenue To answer this question we look at the rental, inventory, and film tables. film_rank_sql &lt;- dbGetQuery(con, &quot;select f.film_id,f.title,f.rental_rate,count(*) count,f.rental_rate * count(*) rental_amt from rental r join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id group by f.film_id,f.title,f.rental_rate order by count(*) desc&quot;) sp_print_df(film_rank_sql) The most frequently rented movie, 34 times, is â€˜Bucket Brotherhoodâ€™ followed by Rocketeer Mother, 33 times. 19.2.10.1 Replicate the output above using dplyr syntax. 19.2.11 11 What is the rental distribution/DVD for the top two rented films? From the previous exercise we know that the top two films are Bucket Brotherhood and Rocketeer Mother. To answer this question we look at the rental, inventory, and film tables again. Instead of looking at the film level, we need to drill down to the individual dvdâ€™s for each film to answer this question. film_rank_sql &lt;- dbGetQuery(con, &quot;select i.store_id,i.film_id,f.title,i.inventory_id,count(*) from rental r join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id where i.film_id in (103,738) group by i.store_id,i.film_id,f.title,i.inventory_id&quot;) sp_print_df(film_rank_sql) The â€˜Bucket Brotherhoodâ€™ and â€˜Rocketeer Motherâ€™ DVDâ€™s are equally distributed between the two stores, 4 dvdâ€™s each per film. The â€˜Bucket Brotherhoodâ€™ was rented 17 times from both stores. The â€˜Rocketeer Motherâ€™ was rented 15 times from store 1 and 18 times from store 2. 19.2.11.1 Replicate the output above using dplyr syntax. 19.2.12 12. List staffing information for store 1 associated with the Bucket Brother rentals? To answer this question we look at the rental, inventory, film, staff, address, city, and country tables. film_103_details_sql &lt;- dbGetQuery(con, &quot;select i.store_id,i.film_id,f.title,i.inventory_id inv_id ,r.rental_date::date rented,r.return_date::date returned ,s.staff_id,s.store_id staff_store_id,concat(s.first_name,&#39; &#39;,s.last_name) staff,ctry.country from rental r join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id join staff s on r.staff_id = s.staff_id join address a on s.address_id = a.address_id join city c on a.city_id = c.city_id join country ctry on c.country_id = ctry.country_id where i.film_id in (103) and r.rental_date::date between &#39;2005-05-01&#39;::date and &#39;2005-06-01&#39;::date order by r.rental_date &quot;) sp_print_df(film_103_details_sql) In a previous exercise we saw that store 1 based in Canada and store 2 based in Austrailia each had one employee, staff_id 1 and 2 respectively. We see that Mike from store 1, Canada, had transactions in store 1 and store 2 on 5/25/2005. Similarly Jon from store 2, Australia, had transaction in store 2 and store 1 on 5/31/2005. ### 12. Which film(s) have never been rented To answer this question we look at the film, inventory and rental tables. never_rented_dvds_sql &lt;- dbGetQuery(con, &#39;select i.store_id,f.film_id, f.title,f.description, i.inventory_id from film f join inventory i on f.film_id = i.film_id left join rental r on i.inventory_id = r.inventory_id where r.inventory_id is null &#39; ) sp_print_df(never_rented_dvds_sql) 19.2.12.1 Replicate the output above using dplyr syntax. 19.2.13 13. How many films are in each film rating? To answer this question we look at the film table to answer this question. film_ratings_sql &lt;- dbGetQuery(con, &#39;select f.rating,count(*) from film f group by f.rating order by count(*) desc &#39; ) sp_print_df(film_ratings_sql) 19.2.14 14. What are the different film categories? film_categories_sql &lt;- dbGetQuery(con, &#39;select * from category&#39; ) sp_print_df(film_categories_sql) 19.2.15 15. Rank the film categeories in descending order film_categories_sql &lt;- dbGetQuery(con, &#39;select c.name,count(*) count from category c join film_category fc on c.category_id = fc.category_id group by c.name order by count(*) desc &#39; ) sp_print_df(film_categories_sql) There are 16 film categories. The highest category, Sports, has 77 films followed by the International category which has 76 film. What is an example of an international category film where all films are currently in English? 19.2.16 16. Which films are listed in multiple categories? To answer this question we look at the film, film_category and category tables. multiple_categories_sql &lt;- dbGetQuery(con, &#39;select f.film_id, f.title,c.name from film_category fc join film f on fc.film_id = f.film_id join category c on fc.category_id = c.category_id where fc.film_id in (select fc.film_id from film f join film_category fc on f.film_id = fc.film_id group by fc.film_id having count(*) &gt; 1 ) &#39; ) sp_print_df(multiple_categories_sql) There is only one film which has two categories, Sophieâ€™s Choice. 19.2.17 17. Which films are in one storeâ€™s inventory but not the other In the table below we show the first 10 rows. To answer this question we look at the inventory and film tables. rs &lt;- dbGetQuery( con, &quot; -- select store1,count(count1) not_in2,sum(count1) store1_dvds -- ,store2,count(count2) not_in1,sum(count2) store2_dvds -- from ( select coalesce(i1.film_id,i2.film_id) film_id,f.title,f.rental_rate ,i1.store_id store1,i1.count count1 ,i2.store_id store2,i2.count count2 from (select film_id,store_id,count(*) count from inventory where store_id = 1 group by film_id,store_id) as i1 full outer join (select film_id,store_id,count(*) count from inventory where store_id = 2 group by film_id,store_id ) as i2 on i1.film_id = i2.film_id join film f on coalesce(i1.film_id,i2.film_id) = f.film_id where i1.film_id is null or i2.film_id is null order by f.title ; -- ) as src -- group by store1,store2 &quot; ) if(HEAD_N &gt; 0) { sp_print_df(head(rs,n=HEAD_N)) } else { sp_print_df(rs) } Store 1 has 196 films, 576 dvdâ€™s that are not in store 2 and store 2 has 199 films that are not in store1. 19.2.18 18 Which films are not tracked in inventory? To answer this question we look at the film and rental tables. film_rank_sql &lt;- dbGetQuery(con, &quot; select f.film_id,title,rating,rental_rate,replacement_cost from film f left outer join inventory i on f.film_id = i.film_id where i.film_id is null; &quot;) if(HEAD_N &gt; 0) { sp_print_df(head(film_rank_sql,n=HEAD_N)) } else { sp_print_df(film_rank_sql) } There are 42 films that do not exist in inventory or in either store. These may be DVDâ€™s that have been ordered but the business has not received them. Looking at the price and the replacement cost, it doesnâ€™t look like there is any rhyme or reason to the setting of the price. 19.2.19 19 List film categories in descending accounts receivable. To answer this question we look at the rental, inventory, film, film_category and category tables. Column Mapping Definition category category.name ar film.rental_rate film_category_AR_rank_sql &lt;- dbGetQuery(con, &quot; select category,AR ,sum(AR) over (order by AR desc rows between unbounded preceding and current row) running_AR ,rentals ,sum(rentals) over (order by AR desc rows between unbounded preceding and current row) running_rentals from (select c.name category, sum(f.rental_rate) AR, count(*) rentals from rental r join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id join film_category fc on f.film_id = fc.film_id join category c on fc.category_id = c.category_id group by c.name ) src &quot;) sp_print_df(film_category_AR_rank_sql) There are 16 film categories. The top three categories based on highest AR amounts are Sports, Drama, and Sci-Fi. The total number of rentals are 16046 with an AR amount of 47221.54. 19.2.20 20. List film ratings in descending accounts receivable order. To answer this question we look at the rental, inventory, and film tables. film_rating_rank_sql &lt;- dbGetQuery(con, &quot;select rating,AR ,sum(AR) over (order by AR desc rows between unbounded preceding and current row) running_AR ,rentals ,sum(rentals) over (order by AR desc rows between unbounded preceding and current row) running_rentals from (select f.rating, sum(f.rental_rate) AR, count(*) rentals from rental r join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id group by f.rating ) as src &quot;) sp_print_df(film_rating_rank_sql) There are 5 film ratings. The total number of rentals are 16045 with an AR amount of 47216.55. Why do the film categories revenue and film rating revenue amounts and counts differ? 19.2.20.1 Replicate the output above using dplyr syntax. column mapping definition rating film.rating ar f.rental_rate running_ar accumulated ar amounts based on ratings rentals number of rentals associated with the rating running_rentals running rating rentals 19.2.21 21. How many rentals were returned on time, returned late, never returned? To answer this question we look at the rental, inventory, and film tables. rs &lt;- dbGetQuery(con, &quot;with details as (select case when r.return_date is null then null else r.return_date::date - (r.rental_date + INTERVAL &#39;1 day&#39; * f.rental_duration)::date end rtn_stat ,case when r.return_date is null and r.rental_id is null then null when r.return_date is not null or r.return_date is null and r.rental_id is null then 0 else 1 end not_rtn from rental r join inventory i on r.inventory_id = i.inventory_id left join film f on i.film_id = f.film_id ) select sum(case when rtn_stat &lt;= 0 then 1 else 0 end) on_time ,sum(case when rtn_stat &gt; 0 then 1 else 0 end) late ,sum(not_rtn) not_rtn ,count(*) rented ,round(100. * sum(case when rtn_stat &lt;= 0 then 1 else 0 end)/count(*),2) on_time_pct ,round(100. * sum(case when rtn_stat &gt; 0 then 1 else 0 end)/count(*),2) late_pct ,round(100. * sum(not_rtn)/count(*),2) not_rtn_pct from details &quot;) sp_print_df(rs) To date 53.56% of the rented DVDâ€™s were returned on time, 45.30% were returned late, and 1.14% were never returned. 19.2.21.1 Replicate the output above using dplyr syntax. column mapping definition 19.2.22 22. Are there duplicate customers? We assume that if the customer first and last name match in two different rows, then it is a duplicate customer. customer_dupes_sql &lt;- dbGetQuery( con, &quot;select cust.customer_id id ,cust.store_id store ,concat(cust.first_name,&#39; &#39;,cust.last_name) customer ,cust.email -- ,a.phone ,a.address ,c.city ,a.postal_code zip ,a.district ,ctry.country from customer cust join address a on cust.address_id = a.address_id join city c on a.city_id = c.city_id join country ctry on c.country_id = ctry.country_id where concat(cust.first_name,cust.last_name) in (select concat(first_name,last_name) from customer group by concat(first_name,last_name) having count(*) &gt;1 ) &quot;) sp_print_df(customer_dupes_sql) Sophie is the only duplicate customer. The only difference between the two records is the store. Record 600 is associated with store 3, which has no employees, and 601 is associated with store 2 19.2.22.1 Replicate the output above using dplyr syntax. column mapping definition 19.2.23 23. Which customers have never rented a movie? To answer this question we look at the customer and rental tables. customer_rental_anti_join_sql &lt;- dbGetQuery( con, &quot;select c.customer_id id ,c.first_name ,c.last_name ,c.email ,a.phone ,city.city ,ctry.country ,c.active ,c.create_date -- ,c.last_update from customer c left join rental r on c.customer_id = r.customer_id left join address a on c.address_id = a.address_id left join city on a.city_id = city.city_id left join country ctry on city.country_id = ctry.country_id where r.rental_id is null; &quot; ) sp_print_df(customer_rental_anti_join_sql) We see that there are four new customers who have never rented a movie. These four customers are in the countries that have a manned store. 19.2.23.1 Replicate the output above using dplyr syntax. 19.2.24 24 Who are the top 5 customers with the most rentals and associated payments? This exercise uses the customer, rental, and payment tables. customer_rental_ij_sql &lt;- dbGetQuery( con, &quot;select c.customer_id id,c.store_id ,concat(c.first_name,&#39; &#39;,c.last_name) customer ,min(rental_date)::date mn_rental_dt ,max(rental_date)::date mx_rental_dt ,count(r.rental_id) ,sum(COALESCE(p.amount,0.)) from customer c left join rental r on c.customer_id = r.customer_id left join payment p on r.rental_id = p.rental_id group by c.customer_id ,c.first_name ,c.last_name ,c.store_id order by count(r.rental_id) desc limit 5 &quot; ) sp_print_df(customer_rental_ij_sql) The top 5 customers all rented between 41 to 46 DVDâ€™s. Three of the top 5 rented about 14 DVDâ€™s per month over a three month period. The other two customers 41 and 42 DVDâ€™s per 12 months. 19.2.24.1 Replicate the output above using dplyr syntax. Use the dplyr inner_join verb to find the top 5 customers who have rented the most movies. 19.2.25 25 Combine the top 5 rental customers, (40 or more rentals), and zero rental customers The managers love the two reports, but they would like them combined into a single report. customer_rental_high_low_sql &lt;- dbGetQuery( con, &quot;select c.customer_id cust_id ,concat(c.first_name,&#39; &#39;,c.last_name) customer ,count(*) cust_cnt ,count(r.rental_id) rentals ,count(p.payment_id) payments ,sum(coalesce(p.amount,0)) paid from customer c left outer join rental r on c.customer_id = r.customer_id left outer join payment p on r.rental_id = p.rental_id group by c.customer_id ,c.first_name ,c.last_name having count(r.rental_id) = 0 or count(r.rental_id) &gt; 40 order by count(r.rental_id) desc &quot; ) sp_print_df(customer_rental_high_low_sql) 19.2.25.1 Replicate the output above using dplyr syntax. 19.2.26 26. Who are the top-n1 and bottom-n2 customers? The issue with the two previous reports is that the top end is hardcoded, rentals &gt; 40. Over time, the current customers will always be in the top section and new customers will get added. Another way of looking at the previous report is to show just the top and bottom 5 customers. Parmeterize the previous exercise to show the top 5 and bottom 5 customers. customer_rentals_hi_low_sql &lt;- function(high_n,low_n) { customer_rental_high_low_sql &lt;- dbGetQuery(con, &quot;select * from ( select * ,ROW_NUMBER() OVER(ORDER BY rentals desc) rent_hi_low ,ROW_NUMBER() OVER(ORDER BY rentals ) rent_low_hi FROM ( select c.customer_id id ,concat(c.first_name,&#39; &#39;,c.last_name) customer ,count(*) cust_cnt ,count(r.rental_id) rentals ,count(p.payment_id) payments ,sum(coalesce(p.amount,0)) paid from customer c left outer join rental r on c.customer_id = r.customer_id left outer join payment p on r.rental_id = p.rental_id group by c.customer_id ,c.first_name ,c.last_name ) as summary ) row_nums where rent_hi_low &lt;= $1 or rent_low_hi &lt;= $2 order by rent_hi_low &quot; ,c(high_n,low_n) ) return (customer_rental_high_low_sql) } The next code block executes a sql version of such a function. With top_n = 5 and bot_n = 5, it replicates the hard coded version of the previous exercise. With top_n = 5 and bot_n = 0, it gives a top 5 report. With top_n = 0 and bot_n = 5, the report returns the bottom 5. Change the two parameters to see the output from the different combinations. top_n = 5 bot_n = 5 sp_print_df(customer_rentals_hi_low_sql(top_n,bot_n)) 19.2.26.1 Replicate the function above use dplyr syntax. top_n = 0 bot_n = 0 sp_print_df(customer_rentals_hi_low_dplr(top_n,bot_n)) 19.2.27 27. How much has each store collected? How are the stores performing? The SQL code shows the payments made to each store in the business. rs &lt;- dbGetQuery( con, &quot;select store_id,sum(p.amount) amt,count(*) cnt from payment p join staff s on p.staff_id = s.staff_id group by store_id order by 2 desc ; &quot; ) sp_print_df(head(rs)) 19.2.27.1 Exercise dplyr store revenue stream Complete the following code block to return the payments made to each store. 19.2.28 28. What is the businessâ€™ distribution of payments? To answer this question we look at the rental, payment, inventory, and film tables to answer this question. As a sanity check, we first check the number of rental records. sp_print_df(dbGetQuery(con,&quot;select count(*) Rentals from rental&quot;)) This table describes the columns in the code block answer that follows. Column Mapping Definition no_pay_rec film.rental_rate aggregated DVD rental rates without an associated payment record. no_pay_rec_cnt number of DVD rentals without an associated payment record. paid_off payment.amount aggregated DVD payments that match the film rental rate. paid_off_cnt number of DVD payments that match the film rental rate. over_paid payment.amount aggregated DVD payments greater than the film rental rate. over_paid_cnt number of DVD payments greater than the film rental rate. under_paid payment.amount aggregated DVD payments less than the film rental rate. under_paid_cnt number of DVD payments greater than the film rental rate. count number of records analyzed business_payment_dist_sql &lt;- dbGetQuery( con, &quot;SELECT sum(case when p.rental_id is null then rental_rate else 0 end ) no_pay_rec ,sum(case when p.rental_id is null then 1 else 0 end) no_pay_rec_cnt ,round(100.*sum(case when p.rental_id is null then 1 else 0 end) /count(*),2) no_pay_rec_pct ,sum(case when f.rental_rate = p.amount then p.amount else 0 end) paid_off ,round(100.*sum(case when f.rental_rate = p.amount then 1 else 0 end ) /count(*),2) paid_off_pct ,sum(case when f.rental_rate &lt; p.amount then p.amount - rental_rate else 0 end ) over_paid ,sum(case when f.rental_rate &lt; p.amount then 1 else 0 end ) over_paid_cnt ,round(100.*sum(case when f.rental_rate &lt; p.amount then 1 else 0 end ) /count(*),2) over_paid_pct ,sum(case when f.rental_rate &gt; p.amount then rental_rate - p.amount else 0 end ) under_paid ,sum(case when f.rental_rate &gt; p.amount then 1 else 0 end ) under_paid_cnt ,round(100.*sum(case when f.rental_rate &gt; p.amount then 1 else 0 end ) /count(*),2) under_paid_pct ,count(*) count FROM rental r LEFT JOIN payment p ON r.rental_id = p.rental_id and r.customer_id = p.customer_id INNER JOIN inventory i ON r.inventory_id = i.inventory_id INNER JOIN film f ON i.film_id = f.film_id ;&quot; ) sp_print_df(business_payment_dist_sql) These are interesting results. 09.06% of the total records have no associated payment record in the amount of 4302.47 49.39% of the rentals have been fully paid in full, 23397.75. 41.40% of the rentals have collected more than the rental amount by 18456.75 00.15% of the rentals have collected less than the rental amount by 67.76. The no_pay_rec_cnt + under_paid_cnt, \\(1453 + 24 = 1477\\) is the number of rentals which have not been paid in full. The total outstanding balance is \\(4302.47 + 67.76 = 4370.23\\) With over 40 percent over collection, someone needs to find out what is wrong with the collection process. Many customers are owed credits or free rentals. 19.2.28.1 Replicate the output above using dplyr syntax. If you are not getting the incorrect count, use the following SQL and results to correct your joins. rs &lt;- dbGetQuery( con, &quot;SELECT &#39;correct join&#39; hint,r.rental_id,r.customer_id,p.customer_id payment_customer_id,p.rental_id payment_rental_id FROM rental r LEFT JOIN payment p ON r.rental_id = p.rental_id and r.customer_id = p.customer_id where r.rental_id = 4591 UNION SELECT &#39;incorrect join&#39; hint,r.rental_id,r.customer_id,p.customer_id payment_customer_id,p.rental_id payment_rental_id FROM rental r LEFT JOIN payment p ON r.rental_id = p.rental_id where r.rental_id = 4591; ;&quot;) sp_print_df(head(rs)) 19.2.29 29. Which customers have the highest open amounts? From the previous exercise, we know that there are 1478 missing payment records or not fully paid payment records. List the top 5 from each category base on balance due amounts. rs &lt;- dbGetQuery( con, &quot; select customer_id ,concat(first_name,&#39; &#39;,last_name) customer ,pay_record ,rental_amt ,paid_amt ,due_amt ,cnt ,rn from (select c.customer_id ,c.first_name ,c.last_name ,case when p.amount is null then &#39;No&#39; else &#39;Yes&#39; end Pay_record ,sum(f.rental_rate) rental_amt ,sum(coalesce(p.amount,0)) paid_amt ,sum(f.rental_rate - coalesce(p.amount,0)) due_amt ,count(*) cnt ,row_number() over (partition by case when p.amount is null then &#39;No&#39; else &#39;Yes&#39; end order by sum(f.rental_rate - coalesce(p.amount,0)) desc,c.customer_id) rn FROM rental r LEFT JOIN payment p ON r.rental_id = p.rental_id and r.customer_id = p.customer_id INNER JOIN inventory i ON r.inventory_id = i.inventory_id INNER JOIN film f ON i.film_id = f.film_id INNER JOIN customer c ON r.customer_id = c.customer_id WHERE coalesce(p.amount,0) = 0 or f.rental_rate &gt; coalesce(p.amount, 0) group by c.customer_id,c.first_name,c.last_name,case when p.amount is null then &#39;No&#39; else &#39;Yes&#39; end ) as src where rn &lt;= 5 -- and Pay_record = &#39;No&#39; or Pay_record = &#39;Yes&#39; order by Pay_record,rn &quot;) sp_print_df(rs) From the previous exercise we see that the number of rentals that have not been paid in full is 1477. There are 24 records that have a payment record, pay_record = â€˜Yesâ€™, all have a 0 paid amount. There are 1453 DVDâ€™s rented out that have no payment record. The top 3 customers have 10 DVDâ€™s that have not been paid. 19.2.29.1 Replicate the output above using dplyr syntax. 19.3 30. What is the business cash flow? In the previous exercise we saw that about 50% of the rentals collected the correct amount and 40% of the rentals over collected. The last 10% were never collected. Calculate the number of days it took before the payment was collected and the amount collected? To answer this question we look at the rental, customer, payment, inventory, payment and film tables to answer this question. rs &lt;- dbGetQuery( con, &quot;with details as ( select c.customer_id id,concat(first_name,&#39; &#39;,c.last_name) customer ,c.email,a.phone,city.city,ctry.country ,f.title ,f.film_id ,r.rental_date::date rented ,r.return_date::date returned ,(r.rental_date + INTERVAL &#39;1 day&#39; * f.rental_duration)::date exp_rtn_dt ,case when r.return_date is null then null else r.return_date::date - (r.rental_date + INTERVAL &#39;1 day&#39; * f.rental_duration)::date end rtn_stat ,case when r.return_date is null and r.rental_id is null then null when r.return_date is not null or r.return_date is null and r.rental_id is null then 0 else 1 end not_rtn ,payment_date::date pay_dt ,f.rental_rate charges ,p.amount paid ,p.amount-f.rental_rate delta ,p.staff_id ,payment_date::date - rental_date::date pay_days ,c.customer_id,f.film_id,r.rental_id,i.inventory_id,payment_id from rental r left join customer c on c.customer_id = r.customer_id left join address a on c.address_id = a.address_id left join city on city.city_id = a.city_id left join country ctry on ctry.country_id = city.country_id left join inventory i on r.inventory_id = i.inventory_id left join payment p on c.customer_id = p.customer_id and p.rental_id = r.rental_id left join film f on i.film_id = f.film_id ) select pay_dt - exp_rtn_dt payment_days ,sum(coalesce(paid,charges)) paid_or_due -- ,min(pay_dt - exp_rtn_dt) mn_late_pay -- ,round(avg(pay_dt - exp_rtn_dt),1) avg_late_pay -- ,max(pay_dt - exp_rtn_dt) mx_late_pay ,count(*) late_returns from details --where returned &gt; exp_rtn_dt group by pay_dt - exp_rtn_dt order by pay_dt - exp_rtn_dt desc &quot;) sp_print_df(rs) Wow those are really generous terms. Customers are paying 1.2 to 1.7 years after they returned the DVD. This business is in serious financial trouble! 19.4 Different strategies for interacting with the database select examples dbGetQuery returns the entire result set as a data frame. For large returned datasets, complex or inefficient SQL statements, this may take a long time. dbSendQuery: parses, compiles, creates the optimized execution plan. dbFetch: Execute optimzed execution plan and return the dataset. dbClearResult: remove pending query results from the database to your R environment 19.4.1 Use dbGetQuery How many customers are there in the DVD Rental System rs1 &lt;- dbGetQuery(con, &quot;select * from customer;&quot;) sp_print_df(head(rs1)) pco &lt;- dbSendQuery(con, &quot;select * from customer;&quot;) rs2 &lt;- dbFetch(pco) dbClearResult(pco) sp_print_df(head(rs2)) # diconnect from the db # dbDisconnect(con) # sp_docker_stop(&quot;sql-pet&quot;) # knitr::knit_exit() "]
]
