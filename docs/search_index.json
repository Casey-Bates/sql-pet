[
["docker-postgres-and-r-04.html", "Chapter 6 Docker, Postgres, and R (04) 6.1 Verify that Docker is running 6.2 Clean up if appropriate 6.3 Connect, read and write to Postgres from R 6.4 Clean up", " Chapter 6 Docker, Postgres, and R (04) At the end of this chapter, you will be able to Run, clean-up and close Docker containers. See how to keep credentials secret in code that’s visible to the world. Interact with Postgres using Rstudio inside Docker container. # Read and write to postgreSQL from R. We always load the tidyverse and some other packages, but don’t show it unless we are using packages other than tidyverse, DBI, RPostgres, and glue. Devtools install of sqlpetr if not already installed 6.1 Verify that Docker is running Docker commands can be run from a terminal (e.g., the Rstudio Terminal pane) or with a system() command. In this tutorial, we use system2() so that all the output that is created externally is shown. Note that system2 calls are divided into several parts: The program that you are sending a command to. The parameters or commands that are being sent. stdout = TRUE, stderr = TRUE are two parameters that are standard in this book, so that the command’s full output is shown in the book. Check that docker is up and running: sp_check_that_docker_is_up() ## [1] &quot;Docker is up but running no containers&quot; 6.2 Clean up if appropriate Remove the cattle and sql-pet containers if they exists (e.g., from a prior experiments). sp_docker_remove_container(&quot;cattle&quot;) ## Warning in system2(&quot;docker&quot;, docker_command, stdout = TRUE, stderr = TRUE): ## running command &#39;&#39;docker&#39; rm -f cattle 2&gt;&amp;1&#39; had status 1 ## [1] &quot;Error: No such container: cattle&quot; ## attr(,&quot;status&quot;) ## [1] 1 sp_docker_remove_container(&quot;sql-pet&quot;) ## Warning in system2(&quot;docker&quot;, docker_command, stdout = TRUE, stderr = TRUE): ## running command &#39;&#39;docker&#39; rm -f sql-pet 2&gt;&amp;1&#39; had status 1 ## [1] &quot;Error: No such container: sql-pet&quot; ## attr(,&quot;status&quot;) ## [1] 1 The convention we use in this book is to put docker commands in the sqlpetr package so that you can ignore them if you want. However, the functions are set up so that you can easily see how to do things with Docker and modify if you want. We name containers cattle for “throw-aways” and pet for ones we treasure and keep around. :-) sp_make_simple_pg(&quot;cattle&quot;) ## [1] 0 Docker returns a long string of numbers. If you are running this command for the first time, Docker downloads the PostgreSQL image, which takes a bit of time. The following command shows that a container named cattle is running postgres:10. postgres is waiting for a connection: sp_check_that_docker_is_up() ## [1] &quot;Docker is up, running these containers:&quot; ## [2] &quot;CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES&quot; ## [3] &quot;68d8943f3a17 postgres:10 \\&quot;docker-entrypoint.s…\\&quot; 1 second ago Up Less than a second 0.0.0.0:5432-&gt;5432/tcp cattle&quot; 6.3 Connect, read and write to Postgres from R 6.3.1 Pause for some security considerations We use the following sp_get_postgres_connection function, which will repeatedly try to connect to PostgreSQL. PostgreSQL can take different amounts of time to come up and be ready to accept connections from R, depending on various factors depending on your computer and its configuration. When we call sp_get_postgres_connection below we’ll use environment variables that R obtains from reading a file named .Renviron. This approach has two benefits: that file is not uploaded to Github and R looks for it in your default directory every time it loads. To see whether you have already created that file, execute this in your R session: dir(path = “~”, pattern = “.Renviron”, all.files = TRUE) That file should contain lines that look like the example just below this box. Although in this example it contains the PostreSQL default values for the username and password, they are obvioiusly not secret. But this approach demonstrates how they could be kept secret and not accidentally uploaded to Github or some other public location when you do need to keep credentials secret. If needed, you could copy / paste the following into your .Renviron file: DEFAULT_POSTGRES_PASSWORD=postgres DEFAULT_POSTGRES_USER_NAME=postgres This is how the sp_get_postgres_connection function is used: con &lt;- sp_get_postgres_connection(user = Sys.getenv(&quot;DEFAULT_POSTGRES_USER_NAME&quot;), password = Sys.getenv(&quot;DEFAULT_POSTGRES_PASSWORD&quot;), dbname = &quot;postgres&quot;, seconds_to_test = 10) If you don’t have an .Rprofile file that defines those passwords, you can just insert a string for the parameter, like: password = 'whatever', Make sure that you can connect to the PostgreSQL database that you started earlier. If you have been executing the code from this tutorial, the database will not contain any tables yet: dbListTables(con) ## character(0) 6.3.2 Interact with Postgres Write mtcars to PostgreSQL dbWriteTable(con, &quot;mtcars&quot;, mtcars, overwrite = TRUE) List the tables in the PostgreSQL database to show that mtcars is now there: dbListTables(con) ## [1] &quot;mtcars&quot; # list the fields in mtcars: dbListFields(con, &quot;mtcars&quot;) ## [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; ## [11] &quot;carb&quot; Download the table from the DBMS to a local data frame: mtcars_df &lt;- tbl(con, &quot;mtcars&quot;) # Show a few rows: knitr::kable(head(mtcars_df)) mpg cyl disp hp drat wt qsec vs am gear carb 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 6.4 Clean up Afterwards, always disconnect from the DBMS, stop the docker container and (optionally) remove it. dbDisconnect(con) # tell Docker to stop the container: sp_docker_stop(&quot;cattle&quot;) ## [1] &quot;cattle&quot; # Tell Docker to remove the container from it&#39;s library of active containers: sp_docker_remove_container(&quot;cattle&quot;) ## [1] &quot;cattle&quot; If we stop the docker container but don’t remove it (with the rm cattle command), the container will persist and we can start it up again later with start cattle. In that case, mtcars would still be there and we could retrieve it from R again. Since we have now removed the cattle container, the whole database has been deleted. (There are enough copies of mtcars in the world, so no great loss.) "]
]
