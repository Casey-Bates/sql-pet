[
["dplyr-to-sql-translations.html", "G Dplyr to SQL translations G.1 Overview", " G Dplyr to SQL translations This Appendix is based on the work of Dewey Dunnington ((???)(http://twitter.com/paleolimbot)) which he published here: https://apps.fishandwhistle.net/archives/1503 https://rud.is/b/2019/04/10/lost-in-sql-translation-charting-dbplyr-mapped-sql-function-support-across-all-backends/ G.1 Overview These packages are called in this Appendix: library(tidyverse) library(dbplyr) library(gt) library(here) list the DBI functions that are available: names(sql_translate_env(simulate_dbi())) ## [1] &quot;-&quot; &quot;:&quot; &quot;!&quot; ## [4] &quot;!=&quot; &quot;(&quot; &quot;{&quot; ## [7] &quot;*&quot; &quot;/&quot; &quot;&amp;&quot; ## [10] &quot;&amp;&amp;&quot; &quot;%%&quot; &quot;%&gt;%&quot; ## [13] &quot;%in%&quot; &quot;^&quot; &quot;+&quot; ## [16] &quot;&lt;&quot; &quot;&lt;=&quot; &quot;==&quot; ## [19] &quot;&gt;&quot; &quot;&gt;=&quot; &quot;|&quot; ## [22] &quot;||&quot; &quot;abs&quot; &quot;acos&quot; ## [25] &quot;acosh&quot; &quot;as.character&quot; &quot;as.double&quot; ## [28] &quot;as.integer&quot; &quot;as.numeric&quot; &quot;asin&quot; ## [31] &quot;asinh&quot; &quot;atan&quot; &quot;atan2&quot; ## [34] &quot;atanh&quot; &quot;between&quot; &quot;c&quot; ## [37] &quot;case_when&quot; &quot;ceil&quot; &quot;ceiling&quot; ## [40] &quot;coalesce&quot; &quot;cos&quot; &quot;cosh&quot; ## [43] &quot;cot&quot; &quot;coth&quot; &quot;desc&quot; ## [46] &quot;exp&quot; &quot;floor&quot; &quot;if&quot; ## [49] &quot;if_else&quot; &quot;ifelse&quot; &quot;is.na&quot; ## [52] &quot;is.null&quot; &quot;log&quot; &quot;log10&quot; ## [55] &quot;na_if&quot; &quot;nchar&quot; &quot;pmax&quot; ## [58] &quot;pmin&quot; &quot;round&quot; &quot;sign&quot; ## [61] &quot;sin&quot; &quot;sinh&quot; &quot;sql&quot; ## [64] &quot;sqrt&quot; &quot;str_detect&quot; &quot;str_length&quot; ## [67] &quot;str_replace_all&quot; &quot;str_to_lower&quot; &quot;str_to_upper&quot; ## [70] &quot;str_trim&quot; &quot;substr&quot; &quot;tan&quot; ## [73] &quot;tanh&quot; &quot;tolower&quot; &quot;toupper&quot; ## [76] &quot;trimws&quot; &quot;xor&quot; &quot;max&quot; ## [79] &quot;mean&quot; &quot;min&quot; &quot;n&quot; ## [82] &quot;n_distinct&quot; &quot;sum&quot; &quot;var&quot; ## [85] &quot;cume_dist&quot; &quot;cummax&quot; &quot;cummean&quot; ## [88] &quot;cummin&quot; &quot;cumsum&quot; &quot;dense_rank&quot; ## [91] &quot;first&quot; &quot;lag&quot; &quot;last&quot; ## [94] &quot;lead&quot; &quot;max&quot; &quot;mean&quot; ## [97] &quot;min&quot; &quot;min_rank&quot; &quot;n&quot; ## [100] &quot;n_distinct&quot; &quot;nth&quot; &quot;ntile&quot; ## [103] &quot;order_by&quot; &quot;percent_rank&quot; &quot;rank&quot; ## [106] &quot;row_number&quot; &quot;sum&quot; &quot;var&quot; sql_translate_env(simulate_dbi()) ## &lt;sql_variant&gt; ## scalar: -, :, !, !=, (, {, *, /, &amp;, &amp;&amp;, %%, %&gt;%, %in%, ^, +, &lt;, ## scalar: &lt;=, ==, &gt;, &gt;=, |, ||, abs, acos, acosh, as.character, ## scalar: as.double, as.integer, as.numeric, asin, asinh, atan, ## scalar: atan2, atanh, between, c, case_when, ceil, ceiling, ## scalar: coalesce, cos, cosh, cot, coth, desc, exp, floor, if, ## scalar: if_else, ifelse, is.na, is.null, log, log10, na_if, ## scalar: nchar, pmax, pmin, round, sign, sin, sinh, sql, sqrt, ## scalar: str_detect, str_length, str_replace_all, str_to_lower, ## scalar: str_to_upper, str_trim, substr, tan, tanh, tolower, ## scalar: toupper, trimws, xor ## aggregate: max, mean, min, n, n_distinct, sum, var ## window: cume_dist, cummax, cummean, cummin, cumsum, dense_rank, ## window: first, lag, last, lead, max, mean, min, min_rank, n, ## window: n_distinct, nth, ntile, order_by, percent_rank, rank, ## window: row_number, sum, var source(here(&quot;book-src&quot;, &quot;dbplyr-sql-function-translation.R&quot;)) Each of the following dbplyr back ends may have a slightly different translation: translations %&gt;% filter(!is.na(sql)) %&gt;% count(variant) ## # A tibble: 13 x 2 ## variant n ## &lt;chr&gt; &lt;int&gt; ## 1 dbi 163 ## 2 hive 180 ## 3 impala 184 ## 4 mssql 192 ## 5 mysql 113 ## 6 odbc 163 ## 7 odbc_access 186 ## 8 odbc_postgresql 184 ## 9 oracle 180 ## 10 postgres 1 ## 11 sqlite 120 ## 12 teradata 190 ## 13 test 163 Only one postgres translation produces an output: psql &lt;- translations %&gt;% filter(!is.na(sql), variant == &quot;postgres&quot;) %&gt;% select(r, n_args, sql) %&gt;% arrange(r) psql %&gt;% gt html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif; } #cqpqwqagrn .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #000000; font-size: 16px; background-color: #FFFFFF; /* table.background.color */ width: auto; /* table.width */ border-top-style: solid; /* table.border.top.style */ border-top-width: 2px; /* table.border.top.width */ border-top-color: #A8A8A8; /* table.border.top.color */ } #cqpqwqagrn .gt_heading { background-color: #FFFFFF; /* heading.background.color */ border-bottom-color: #FFFFFF; } #cqpqwqagrn .gt_title { color: #000000; font-size: 125%; /* heading.title.font.size */ padding-top: 4px; /* heading.top.padding */ padding-bottom: 1px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #cqpqwqagrn .gt_subtitle { color: #000000; font-size: 85%; /* heading.subtitle.font.size */ padding-top: 1px; padding-bottom: 4px; /* heading.bottom.padding */ border-top-color: #FFFFFF; border-top-width: 0; } #cqpqwqagrn .gt_bottom_border { border-bottom-style: solid; /* heading.border.bottom.style */ border-bottom-width: 2px; /* heading.border.bottom.width */ border-bottom-color: #A8A8A8; /* heading.border.bottom.color */ } #cqpqwqagrn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; padding-top: 4px; padding-bottom: 4px; } #cqpqwqagrn .gt_col_heading { color: #000000; background-color: #FFFFFF; /* column_labels.background.color */ font-size: 16px; /* column_labels.font.size */ font-weight: initial; /* column_labels.font.weight */ vertical-align: middle; padding: 10px; margin: 10px; } #cqpqwqagrn .gt_sep_right { border-right: 5px solid #FFFFFF; } #cqpqwqagrn .gt_group_heading { padding: 8px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #cqpqwqagrn .gt_empty_group_heading { padding: 0.5px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #cqpqwqagrn .gt_striped tr:nth-child(even) { background-color: #f2f2f2; } #cqpqwqagrn .gt_row { padding: 10px; /* row.padding */ margin: 10px; vertical-align: middle; } #cqpqwqagrn .gt_stub { border-right-style: solid; border-right-width: 2px; border-right-color: #A8A8A8; padding-left: 12px; } #cqpqwqagrn .gt_stub.gt_row { background-color: #FFFFFF; } #cqpqwqagrn .gt_summary_row { background-color: #FFFFFF; /* summary_row.background.color */ padding: 6px; /* summary_row.padding */ text-transform: inherit; /* summary_row.text_transform */ } #cqpqwqagrn .gt_first_summary_row { border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; } #cqpqwqagrn .gt_table_body { border-top-style: solid; /* field.border.top.style */ border-top-width: 2px; /* field.border.top.width */ border-top-color: #A8A8A8; /* field.border.top.color */ border-bottom-style: solid; /* field.border.bottom.style */ border-bottom-width: 2px; /* field.border.bottom.width */ border-bottom-color: #A8A8A8; /* field.border.bottom.color */ } #cqpqwqagrn .gt_footnote { font-size: 90%; /* footnote.font.size */ padding: 4px; /* footnote.padding */ } #cqpqwqagrn .gt_sourcenote { font-size: 90%; /* sourcenote.font.size */ padding: 4px; /* sourcenote.padding */ } #cqpqwqagrn .gt_center { text-align: center; } #cqpqwqagrn .gt_left { text-align: left; } #cqpqwqagrn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #cqpqwqagrn .gt_font_normal { font-weight: normal; } #cqpqwqagrn .gt_font_bold { font-weight: bold; } #cqpqwqagrn .gt_font_italic { font-style: italic; } #cqpqwqagrn .gt_super { font-size: 65%; } #cqpqwqagrn .gt_footnote_glyph { font-style: italic; font-size: 65%; } r n_args sql c() 0 NULL the postgres variant fails for various reasons: psql_errors &lt;- translations %&gt;% filter(variant == &quot;postgres&quot;) error_list &lt;- tibble( function_name = psql_errors$fun_name, r = psql_errors$r, errors = psql_errors %&gt;% pluck(&quot;errors&quot;)) nrow(error_list) ## [1] 555 gt(head(error_list, n = 15)) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif; } #sohyhvhgeg .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #000000; font-size: 16px; background-color: #FFFFFF; /* table.background.color */ width: auto; /* table.width */ border-top-style: solid; /* table.border.top.style */ border-top-width: 2px; /* table.border.top.width */ border-top-color: #A8A8A8; /* table.border.top.color */ } #sohyhvhgeg .gt_heading { background-color: #FFFFFF; /* heading.background.color */ border-bottom-color: #FFFFFF; } #sohyhvhgeg .gt_title { color: #000000; font-size: 125%; /* heading.title.font.size */ padding-top: 4px; /* heading.top.padding */ padding-bottom: 1px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #sohyhvhgeg .gt_subtitle { color: #000000; font-size: 85%; /* heading.subtitle.font.size */ padding-top: 1px; padding-bottom: 4px; /* heading.bottom.padding */ border-top-color: #FFFFFF; border-top-width: 0; } #sohyhvhgeg .gt_bottom_border { border-bottom-style: solid; /* heading.border.bottom.style */ border-bottom-width: 2px; /* heading.border.bottom.width */ border-bottom-color: #A8A8A8; /* heading.border.bottom.color */ } #sohyhvhgeg .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; padding-top: 4px; padding-bottom: 4px; } #sohyhvhgeg .gt_col_heading { color: #000000; background-color: #FFFFFF; /* column_labels.background.color */ font-size: 16px; /* column_labels.font.size */ font-weight: initial; /* column_labels.font.weight */ vertical-align: middle; padding: 10px; margin: 10px; } #sohyhvhgeg .gt_sep_right { border-right: 5px solid #FFFFFF; } #sohyhvhgeg .gt_group_heading { padding: 8px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #sohyhvhgeg .gt_empty_group_heading { padding: 0.5px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #sohyhvhgeg .gt_striped tr:nth-child(even) { background-color: #f2f2f2; } #sohyhvhgeg .gt_row { padding: 10px; /* row.padding */ margin: 10px; vertical-align: middle; } #sohyhvhgeg .gt_stub { border-right-style: solid; border-right-width: 2px; border-right-color: #A8A8A8; padding-left: 12px; } #sohyhvhgeg .gt_stub.gt_row { background-color: #FFFFFF; } #sohyhvhgeg .gt_summary_row { background-color: #FFFFFF; /* summary_row.background.color */ padding: 6px; /* summary_row.padding */ text-transform: inherit; /* summary_row.text_transform */ } #sohyhvhgeg .gt_first_summary_row { border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; } #sohyhvhgeg .gt_table_body { border-top-style: solid; /* field.border.top.style */ border-top-width: 2px; /* field.border.top.width */ border-top-color: #A8A8A8; /* field.border.top.color */ border-bottom-style: solid; /* field.border.bottom.style */ border-bottom-width: 2px; /* field.border.bottom.width */ border-bottom-color: #A8A8A8; /* field.border.bottom.color */ } #sohyhvhgeg .gt_footnote { font-size: 90%; /* footnote.font.size */ padding: 4px; /* footnote.padding */ } #sohyhvhgeg .gt_sourcenote { font-size: 90%; /* sourcenote.font.size */ padding: 4px; /* sourcenote.padding */ } #sohyhvhgeg .gt_center { text-align: center; } #sohyhvhgeg .gt_left { text-align: left; } #sohyhvhgeg .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #sohyhvhgeg .gt_font_normal { font-weight: normal; } #sohyhvhgeg .gt_font_bold { font-weight: bold; } #sohyhvhgeg .gt_font_italic { font-style: italic; } #sohyhvhgeg .gt_super { font-size: 65%; } #sohyhvhgeg .gt_footnote_glyph { font-style: italic; font-size: 65%; } function_name r errors - `-`() Error in `-`(): argument \"x\" is missing, with no default : `:`() Error in `:`(): argument \"from\" is missing, with no default ! !NULL Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbQuoteIdentifier' for signature '\"PostgreSQLConnection\", \"character\"' != `!=`() Error in eval_bare(x, .env): argument \"x\" is missing, with no default ( (NULL) Error in eval_bare(x, .env): argument \"x\" is missing, with no default { {} Error in eval_bare(x, .env): argument \"x\" is missing, with no default * `*`() Error in eval_bare(x, .env): argument \"x\" is missing, with no default / `/`() Error in eval_bare(x, .env): argument \"x\" is missing, with no default &amp; `&amp;`() Error in eval_bare(x, .env): argument \"x\" is missing, with no default &amp;&amp; `&amp;&amp;`() Error in eval_bare(x, .env): argument \"x\" is missing, with no default %% `%%`() Error in eval_bare(x, .env): argument \"x\" is missing, with no default %&gt;% `%&gt;%`() Error in expr[[3L]]: subscript out of bounds %in% `%in%`() Error in is.sql(table): argument \"table\" is missing, with no default ^ `^`() Error: Invalid number of args to SQL POWER. Expecting 2 + `+`() Error in eval_bare(x, .env): argument \"x\" is missing, with no default unique_error_list &lt;- unique(error_list$errors) %&gt;% as_tibble() ## Warning: Calling `as_tibble()` on a vector is discouraged, because the behavior is likely to change in the future. Use `tibble::enframe(name = NULL)` instead. ## This warning is displayed once per session. gt(unique_error_list) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif; } #ihebfvnxvb .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #000000; font-size: 16px; background-color: #FFFFFF; /* table.background.color */ width: auto; /* table.width */ border-top-style: solid; /* table.border.top.style */ border-top-width: 2px; /* table.border.top.width */ border-top-color: #A8A8A8; /* table.border.top.color */ } #ihebfvnxvb .gt_heading { background-color: #FFFFFF; /* heading.background.color */ border-bottom-color: #FFFFFF; } #ihebfvnxvb .gt_title { color: #000000; font-size: 125%; /* heading.title.font.size */ padding-top: 4px; /* heading.top.padding */ padding-bottom: 1px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ihebfvnxvb .gt_subtitle { color: #000000; font-size: 85%; /* heading.subtitle.font.size */ padding-top: 1px; padding-bottom: 4px; /* heading.bottom.padding */ border-top-color: #FFFFFF; border-top-width: 0; } #ihebfvnxvb .gt_bottom_border { border-bottom-style: solid; /* heading.border.bottom.style */ border-bottom-width: 2px; /* heading.border.bottom.width */ border-bottom-color: #A8A8A8; /* heading.border.bottom.color */ } #ihebfvnxvb .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; padding-top: 4px; padding-bottom: 4px; } #ihebfvnxvb .gt_col_heading { color: #000000; background-color: #FFFFFF; /* column_labels.background.color */ font-size: 16px; /* column_labels.font.size */ font-weight: initial; /* column_labels.font.weight */ vertical-align: middle; padding: 10px; margin: 10px; } #ihebfvnxvb .gt_sep_right { border-right: 5px solid #FFFFFF; } #ihebfvnxvb .gt_group_heading { padding: 8px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #ihebfvnxvb .gt_empty_group_heading { padding: 0.5px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #ihebfvnxvb .gt_striped tr:nth-child(even) { background-color: #f2f2f2; } #ihebfvnxvb .gt_row { padding: 10px; /* row.padding */ margin: 10px; vertical-align: middle; } #ihebfvnxvb .gt_stub { border-right-style: solid; border-right-width: 2px; border-right-color: #A8A8A8; padding-left: 12px; } #ihebfvnxvb .gt_stub.gt_row { background-color: #FFFFFF; } #ihebfvnxvb .gt_summary_row { background-color: #FFFFFF; /* summary_row.background.color */ padding: 6px; /* summary_row.padding */ text-transform: inherit; /* summary_row.text_transform */ } #ihebfvnxvb .gt_first_summary_row { border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; } #ihebfvnxvb .gt_table_body { border-top-style: solid; /* field.border.top.style */ border-top-width: 2px; /* field.border.top.width */ border-top-color: #A8A8A8; /* field.border.top.color */ border-bottom-style: solid; /* field.border.bottom.style */ border-bottom-width: 2px; /* field.border.bottom.width */ border-bottom-color: #A8A8A8; /* field.border.bottom.color */ } #ihebfvnxvb .gt_footnote { font-size: 90%; /* footnote.font.size */ padding: 4px; /* footnote.padding */ } #ihebfvnxvb .gt_sourcenote { font-size: 90%; /* sourcenote.font.size */ padding: 4px; /* sourcenote.padding */ } #ihebfvnxvb .gt_center { text-align: center; } #ihebfvnxvb .gt_left { text-align: left; } #ihebfvnxvb .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ihebfvnxvb .gt_font_normal { font-weight: normal; } #ihebfvnxvb .gt_font_bold { font-weight: bold; } #ihebfvnxvb .gt_font_italic { font-style: italic; } #ihebfvnxvb .gt_super { font-size: 65%; } #ihebfvnxvb .gt_footnote_glyph { font-style: italic; font-size: 65%; } value Error in `-`(): argument \"x\" is missing, with no default Error in `:`(): argument \"from\" is missing, with no default Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbQuoteIdentifier' for signature '\"PostgreSQLConnection\", \"character\"' Error in eval_bare(x, .env): argument \"x\" is missing, with no default Error in expr[[3L]]: subscript out of bounds Error in is.sql(table): argument \"table\" is missing, with no default Error: Invalid number of args to SQL POWER. Expecting 2 Error: Invalid number of args to SQL ABS. Expecting 1 Error: Invalid number of args to SQL ACOS. Expecting 1 Error: Invalid number of args to SQL ACOSH. Expecting 1 Error in enexpr(x): argument \"x\" is missing, with no default Error: Invalid number of args to SQL ASIN. Expecting 1 Error: Invalid number of args to SQL ASINH. Expecting 1 Error: Invalid number of args to SQL ATAN. Expecting 1 Error: Invalid number of args to SQL ATAN2. Expecting 2 Error: Invalid number of args to SQL ATANH. Expecting 1 NA No cases provided Error: Invalid number of args to SQL CEIL. Expecting 1 Error: Invalid number of args to SQL COS. Expecting 1 Error: Invalid number of args to SQL COSH. Expecting 1 Error: Invalid number of args to SQL COTH. Expecting 1 Error: Invalid number of args to SQL EXP. Expecting 1 Error: Invalid number of args to SQL FLOOR. Expecting 1 Error in eval_bare(x, .env): argument \"cond\" is missing, with no default Error in sql_if(condition, true, false): argument \"condition\" is missing, with no default Error in sql_if(test, yes, no): argument \"test\" is missing, with no default Error: Invalid number of args to SQL NULL_IF. Expecting 2 Error: Invalid number of args to SQL LENGTH. Expecting 1 Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbQuoteString' for signature '\"PostgreSQLConnection\", \"character\"' Error: Invalid number of args to SQL SIGN. Expecting 1 Error: Invalid number of args to SQL SIN. Expecting 1 Error: Invalid number of args to SQL SINH. Expecting 1 Error: Invalid number of args to SQL SQRT. Expecting 1 Error in enexpr(x): argument \"string\" is missing, with no default Error in eval_bare(x, .env): argument \"string\" is missing, with no default Error in substr(): argument \"stop\" is missing, with no default Error: Invalid number of args to SQL TAN. Expecting 1 Error: Invalid number of args to SQL TANH. Expecting 1 Error: Invalid number of args to SQL LOWER. Expecting 1 Error: Invalid number of args to SQL UPPER. Expecting 1 Error: Invalid number of args to SQL TRIM. Expecting 1 Error in escape(x): argument \"x\" is missing, with no default Error in order_by %||% win_current_order(): argument \"order_by\" is missing, with no default Error in is.null(vars) || is.character(vars): argument \"order_by\" is missing, with no default Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbQuoteIdentifier' for signature '\"PostgreSQLConnection\", \"ident\"' The == function across variant dbplyr backends equal = translations %&gt;% filter(fun_name == &quot;==&quot;) equal_list &lt;- tibble( variant = equal$variant, n_args = equal$n_args, r = equal$r, sql = equal$sql, errors = equal %&gt;% pluck(&quot;errors&quot;)) %&gt;% arrange(variant, n_args) %&gt;% filter(between(n_args,1,3)) equal_list %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif; } #lghnetfgzu .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #000000; font-size: 16px; background-color: #FFFFFF; /* table.background.color */ width: auto; /* table.width */ border-top-style: solid; /* table.border.top.style */ border-top-width: 2px; /* table.border.top.width */ border-top-color: #A8A8A8; /* table.border.top.color */ } #lghnetfgzu .gt_heading { background-color: #FFFFFF; /* heading.background.color */ border-bottom-color: #FFFFFF; } #lghnetfgzu .gt_title { color: #000000; font-size: 125%; /* heading.title.font.size */ padding-top: 4px; /* heading.top.padding */ padding-bottom: 1px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #lghnetfgzu .gt_subtitle { color: #000000; font-size: 85%; /* heading.subtitle.font.size */ padding-top: 1px; padding-bottom: 4px; /* heading.bottom.padding */ border-top-color: #FFFFFF; border-top-width: 0; } #lghnetfgzu .gt_bottom_border { border-bottom-style: solid; /* heading.border.bottom.style */ border-bottom-width: 2px; /* heading.border.bottom.width */ border-bottom-color: #A8A8A8; /* heading.border.bottom.color */ } #lghnetfgzu .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; padding-top: 4px; padding-bottom: 4px; } #lghnetfgzu .gt_col_heading { color: #000000; background-color: #FFFFFF; /* column_labels.background.color */ font-size: 16px; /* column_labels.font.size */ font-weight: initial; /* column_labels.font.weight */ vertical-align: middle; padding: 10px; margin: 10px; } #lghnetfgzu .gt_sep_right { border-right: 5px solid #FFFFFF; } #lghnetfgzu .gt_group_heading { padding: 8px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #lghnetfgzu .gt_empty_group_heading { padding: 0.5px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #lghnetfgzu .gt_striped tr:nth-child(even) { background-color: #f2f2f2; } #lghnetfgzu .gt_row { padding: 10px; /* row.padding */ margin: 10px; vertical-align: middle; } #lghnetfgzu .gt_stub { border-right-style: solid; border-right-width: 2px; border-right-color: #A8A8A8; padding-left: 12px; } #lghnetfgzu .gt_stub.gt_row { background-color: #FFFFFF; } #lghnetfgzu .gt_summary_row { background-color: #FFFFFF; /* summary_row.background.color */ padding: 6px; /* summary_row.padding */ text-transform: inherit; /* summary_row.text_transform */ } #lghnetfgzu .gt_first_summary_row { border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; } #lghnetfgzu .gt_table_body { border-top-style: solid; /* field.border.top.style */ border-top-width: 2px; /* field.border.top.width */ border-top-color: #A8A8A8; /* field.border.top.color */ border-bottom-style: solid; /* field.border.bottom.style */ border-bottom-width: 2px; /* field.border.bottom.width */ border-bottom-color: #A8A8A8; /* field.border.bottom.color */ } #lghnetfgzu .gt_footnote { font-size: 90%; /* footnote.font.size */ padding: 4px; /* footnote.padding */ } #lghnetfgzu .gt_sourcenote { font-size: 90%; /* sourcenote.font.size */ padding: 4px; /* sourcenote.padding */ } #lghnetfgzu .gt_center { text-align: center; } #lghnetfgzu .gt_left { text-align: left; } #lghnetfgzu .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #lghnetfgzu .gt_font_normal { font-weight: normal; } #lghnetfgzu .gt_font_bold { font-weight: bold; } #lghnetfgzu .gt_font_italic { font-style: italic; } #lghnetfgzu .gt_super { font-size: 65%; } #lghnetfgzu .gt_footnote_glyph { font-style: italic; font-size: 65%; } variant n_args r sql errors dbi 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default dbi 2 arg1 == arg2 \"arg1\" = \"arg2\" NA dbi 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) hive 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default hive 2 arg1 == arg2 `arg1` = `arg2` NA hive 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) impala 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default impala 2 arg1 == arg2 `arg1` = `arg2` NA impala 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) mssql 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default mssql 2 arg1 == arg2 `arg1` = `arg2` NA mssql 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) mysql 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default mysql 2 arg1 == arg2 `arg1` = `arg2` NA mysql 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) odbc 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default odbc 2 arg1 == arg2 `arg1` = `arg2` NA odbc 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) odbc_access 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default odbc_access 2 arg1 == arg2 `arg1` = `arg2` NA odbc_access 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) odbc_postgresql 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default odbc_postgresql 2 arg1 == arg2 `arg1` = `arg2` NA odbc_postgresql 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) oracle 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default oracle 2 arg1 == arg2 `arg1` = `arg2` NA oracle 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) postgres 1 ==arg1 NA Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbQuoteIdentifier' for signature '\"PostgreSQLConnection\", \"ident\"' postgres 2 arg1 == arg2 NA Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbQuoteIdentifier' for signature '\"PostgreSQLConnection\", \"ident\"' postgres 3 `==`(arg1, arg2, arg3) NA Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbQuoteIdentifier' for signature '\"PostgreSQLConnection\", \"ident\"' sqlite 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default sqlite 2 arg1 == arg2 `arg1` = `arg2` NA sqlite 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) teradata 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default teradata 2 arg1 == arg2 `arg1` = `arg2` NA teradata 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) test 1 ==arg1 NA Error in eval_bare(x, .env): argument \"y\" is missing, with no default test 2 arg1 == arg2 `arg1` = `arg2` NA test 3 `==`(arg1, arg2, arg3) NA Error in `==`(arg1, arg2, arg3): unused argument (arg3) odbc_postgres works on the whole list of SQL functions psql &lt;- translations %&gt;% filter(!is.na(sql), variant == &quot;odbc_postgresql&quot;) %&gt;% select(r, n_args, sql) %&gt;% arrange(r) psql %&gt;% gt html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif; } #oqiqinrmgt .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #000000; font-size: 16px; background-color: #FFFFFF; /* table.background.color */ width: auto; /* table.width */ border-top-style: solid; /* table.border.top.style */ border-top-width: 2px; /* table.border.top.width */ border-top-color: #A8A8A8; /* table.border.top.color */ } #oqiqinrmgt .gt_heading { background-color: #FFFFFF; /* heading.background.color */ border-bottom-color: #FFFFFF; } #oqiqinrmgt .gt_title { color: #000000; font-size: 125%; /* heading.title.font.size */ padding-top: 4px; /* heading.top.padding */ padding-bottom: 1px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #oqiqinrmgt .gt_subtitle { color: #000000; font-size: 85%; /* heading.subtitle.font.size */ padding-top: 1px; padding-bottom: 4px; /* heading.bottom.padding */ border-top-color: #FFFFFF; border-top-width: 0; } #oqiqinrmgt .gt_bottom_border { border-bottom-style: solid; /* heading.border.bottom.style */ border-bottom-width: 2px; /* heading.border.bottom.width */ border-bottom-color: #A8A8A8; /* heading.border.bottom.color */ } #oqiqinrmgt .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; padding-top: 4px; padding-bottom: 4px; } #oqiqinrmgt .gt_col_heading { color: #000000; background-color: #FFFFFF; /* column_labels.background.color */ font-size: 16px; /* column_labels.font.size */ font-weight: initial; /* column_labels.font.weight */ vertical-align: middle; padding: 10px; margin: 10px; } #oqiqinrmgt .gt_sep_right { border-right: 5px solid #FFFFFF; } #oqiqinrmgt .gt_group_heading { padding: 8px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #oqiqinrmgt .gt_empty_group_heading { padding: 0.5px; color: #000000; background-color: #FFFFFF; /* stub_group.background.color */ font-size: 16px; /* stub_group.font.size */ font-weight: initial; /* stub_group.font.weight */ border-top-style: solid; /* stub_group.border.top.style */ border-top-width: 2px; /* stub_group.border.top.width */ border-top-color: #A8A8A8; /* stub_group.border.top.color */ border-bottom-style: solid; /* stub_group.border.bottom.style */ border-bottom-width: 2px; /* stub_group.border.bottom.width */ border-bottom-color: #A8A8A8; /* stub_group.border.bottom.color */ vertical-align: middle; } #oqiqinrmgt .gt_striped tr:nth-child(even) { background-color: #f2f2f2; } #oqiqinrmgt .gt_row { padding: 10px; /* row.padding */ margin: 10px; vertical-align: middle; } #oqiqinrmgt .gt_stub { border-right-style: solid; border-right-width: 2px; border-right-color: #A8A8A8; padding-left: 12px; } #oqiqinrmgt .gt_stub.gt_row { background-color: #FFFFFF; } #oqiqinrmgt .gt_summary_row { background-color: #FFFFFF; /* summary_row.background.color */ padding: 6px; /* summary_row.padding */ text-transform: inherit; /* summary_row.text_transform */ } #oqiqinrmgt .gt_first_summary_row { border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; } #oqiqinrmgt .gt_table_body { border-top-style: solid; /* field.border.top.style */ border-top-width: 2px; /* field.border.top.width */ border-top-color: #A8A8A8; /* field.border.top.color */ border-bottom-style: solid; /* field.border.bottom.style */ border-bottom-width: 2px; /* field.border.bottom.width */ border-bottom-color: #A8A8A8; /* field.border.bottom.color */ } #oqiqinrmgt .gt_footnote { font-size: 90%; /* footnote.font.size */ padding: 4px; /* footnote.padding */ } #oqiqinrmgt .gt_sourcenote { font-size: 90%; /* sourcenote.font.size */ padding: 4px; /* sourcenote.padding */ } #oqiqinrmgt .gt_center { text-align: center; } #oqiqinrmgt .gt_left { text-align: left; } #oqiqinrmgt .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #oqiqinrmgt .gt_font_normal { font-weight: normal; } #oqiqinrmgt .gt_font_bold { font-weight: bold; } #oqiqinrmgt .gt_font_italic { font-style: italic; } #oqiqinrmgt .gt_super { font-size: 65%; } #oqiqinrmgt .gt_footnote_glyph { font-style: italic; font-size: 65%; } r n_args sql -arg1 1 -`arg1` !arg1 1 NOT(`arg1`) !arg1 2 NOT(`arg1`, `arg2`) !arg1 3 NOT(`arg1`, `arg2`, `arg3`) !arg1 50 NOT(`arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) !NULL 0 NOT() (arg1) 1 (`arg1`) { arg1} 1 (`arg1`) abs(arg1) 1 ABS(`arg1`) acos(arg1) 1 ACOS(`arg1`) acosh(arg1) 1 ACOSH(`arg1`) all(arg1, arg2) 2 bool_and(`arg1`) OVER () all(arg1) 1 bool_and(`arg1`) OVER () any(arg1, arg2) 2 bool_or(`arg1`) OVER () any(arg1) 1 bool_or(`arg1`) OVER () arg1 - arg2 2 `arg1` - `arg2` arg1 != arg2 2 `arg1` != `arg2` arg1 * arg2 2 `arg1` * `arg2` arg1 &amp; arg2 2 `arg1` AND `arg2` arg1 &amp;&amp; arg2 2 `arg1` AND `arg2` arg1 %in% arg2 2 `arg1` IN `arg2` arg1 + arg2 2 `arg1` + `arg2` arg1 &lt; arg2 2 `arg1` &lt; `arg2` arg1 &lt;= arg2 2 `arg1` &lt;= `arg2` arg1 == arg2 2 `arg1` = `arg2` arg1 &gt; arg2 2 `arg1` &gt; `arg2` arg1 &gt;= arg2 2 `arg1` &gt;= `arg2` arg1 | arg2 2 `arg1` OR `arg2` arg1 || arg2 2 `arg1` OR `arg2` arg1/arg2 2 `arg1` / `arg2` arg1%%arg2 2 `arg1` % `arg2` arg1^arg2 2 POWER(`arg1`, `arg2`) as.character(arg1) 1 CAST(`arg1` AS TEXT) as.double(arg1) 1 CAST(`arg1` AS NUMERIC) as.integer(arg1) 1 CAST(`arg1` AS INTEGER) as.numeric(arg1) 1 CAST(`arg1` AS NUMERIC) asin(arg1) 1 ASIN(`arg1`) asinh(arg1) 1 ASINH(`arg1`) atan(arg1) 1 ATAN(`arg1`) atan2(arg1, arg2) 2 ATAN2(`arg1`, `arg2`) atanh(arg1) 1 ATANH(`arg1`) between(arg1, arg2, arg3) 3 `arg1` BETWEEN `arg2` AND `arg3` c() 0 NULL c(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 `arg1` c(arg1, arg2, arg3) 3 `arg1` c(arg1, arg2) 2 `arg1` c(arg1) 1 `arg1` ceil(arg1) 1 CEIL(`arg1`) ceiling(arg1) 1 CEIL(`arg1`) coalesce() 0 COALESCE() coalesce(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 COALESCE(`arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) coalesce(arg1, arg2, arg3) 3 COALESCE(`arg1`, `arg2`, `arg3`) coalesce(arg1, arg2) 2 COALESCE(`arg1`, `arg2`) coalesce(arg1) 1 COALESCE(`arg1`) cor(arg1, arg2) 2 CORR(`arg1`, `arg2`) OVER () cos(arg1) 1 COS(`arg1`) cosh(arg1) 1 COSH(`arg1`) cot(arg1) 1 1 / TAN(`arg1`) coth(arg1) 1 COTH(`arg1`) cov(arg1, arg2) 2 COVAR_SAMP(`arg1`, `arg2`) OVER () cume_dist() 0 cume_dist() OVER () cume_dist(arg1) 1 cume_dist() OVER (ORDER BY `arg1`) cummax(arg1, arg2) 2 max(`arg1`) OVER (ORDER BY `arg2` ROWS UNBOUNDED PRECEDING) cummax(arg1) 1 max(`arg1`) OVER (ROWS UNBOUNDED PRECEDING) cummean(arg1, arg2) 2 avg(`arg1`) OVER (ORDER BY `arg2` ROWS UNBOUNDED PRECEDING) cummean(arg1) 1 avg(`arg1`) OVER (ROWS UNBOUNDED PRECEDING) cummin(arg1, arg2) 2 min(`arg1`) OVER (ORDER BY `arg2` ROWS UNBOUNDED PRECEDING) cummin(arg1) 1 min(`arg1`) OVER (ROWS UNBOUNDED PRECEDING) cumsum(arg1, arg2) 2 sum(`arg1`) OVER (ORDER BY `arg2` ROWS UNBOUNDED PRECEDING) cumsum(arg1) 1 sum(`arg1`) OVER (ROWS UNBOUNDED PRECEDING) dense_rank() 0 dense_rank() OVER () dense_rank(arg1) 1 dense_rank() OVER (ORDER BY `arg1`) desc(arg1) 1 `arg1` DESC exp(arg1) 1 EXP(`arg1`) first(arg1, arg2) 2 first_value(`arg1`) OVER (ORDER BY `arg2`) first(arg1) 1 first_value(`arg1`) OVER () floor(arg1) 1 FLOOR(`arg1`) grepl(arg1, arg2) 2 (`arg2`) ~ (`arg1`) if (arg1) arg2 2 CASE WHEN (`arg1`) THEN (`arg2`) END if (arg1) arg2 else arg3 3 CASE WHEN (`arg1`) THEN (`arg2`) WHEN NOT(`arg1`) THEN (`arg3`) END if_else(arg1, arg2, arg3) 3 CASE WHEN (`arg1`) THEN (`arg2`) WHEN NOT(`arg1`) THEN (`arg3`) END ifelse(arg1, arg2, arg3) 3 CASE WHEN (`arg1`) THEN (`arg2`) WHEN NOT(`arg1`) THEN (`arg3`) END is.na(arg1) 1 ((`arg1`) IS NULL) is.null(arg1) 1 ((`arg1`) IS NULL) lag(arg1, arg2, arg3) 3 LAG(`arg1`, NULL, `arg3`) OVER () lag(arg1, arg2) 2 LAG(`arg1`, NULL, NULL) OVER () lag(arg1) 1 LAG(`arg1`, 1, NULL) OVER () last(arg1, arg2) 2 last_value(`arg1`) OVER (ORDER BY `arg2`) last(arg1) 1 last_value(`arg1`) OVER () lead(arg1, arg2, arg3) 3 LEAD(`arg1`, `arg2`, `arg3`) OVER () lead(arg1, arg2) 2 LEAD(`arg1`, `arg2`, NULL) OVER () lead(arg1) 1 LEAD(`arg1`, 1, NULL) OVER () log(arg1, arg2) 2 LOG(`arg1`) / LOG(`arg2`) log(arg1) 1 LN(`arg1`) log10(arg1) 1 LOG(`arg1`) max(arg1, arg2) 2 max(`arg1`) OVER () max(arg1) 1 max(`arg1`) OVER () mean(arg1, arg2) 2 avg(`arg1`) OVER () mean(arg1) 1 avg(`arg1`) OVER () min_rank() 0 rank() OVER () min_rank(arg1) 1 rank() OVER (ORDER BY `arg1`) min(arg1, arg2) 2 min(`arg1`) OVER () min(arg1) 1 min(`arg1`) OVER () n_distinct() 0 COUNT(DISTINCT ) OVER () n_distinct(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 COUNT(DISTINCT `arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) OVER () n_distinct(arg1, arg2, arg3) 3 COUNT(DISTINCT `arg1`, `arg2`, `arg3`) OVER () n_distinct(arg1, arg2) 2 COUNT(DISTINCT `arg1`, `arg2`) OVER () n_distinct(arg1) 1 COUNT(DISTINCT `arg1`) OVER () n() 0 COUNT(*) OVER () na_if(arg1, arg2) 2 NULL_IF(`arg1`, `arg2`) nchar(arg1) 1 LENGTH(`arg1`) nth(arg1, arg2, arg3) 3 nth_value(`arg1`, NULL) OVER (ORDER BY `arg3`) nth(arg1, arg2) 2 nth_value(`arg1`, NULL) OVER () ntile(arg1, arg2) 2 NTILE(NULL) OVER (ORDER BY `arg1`) order_by(arg1, arg2) 2 `arg2` paste() 0 CONCAT_WS(' ') paste(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 CONCAT_WS(' ', `arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) paste(arg1, arg2, arg3) 3 CONCAT_WS(' ', `arg1`, `arg2`, `arg3`) paste(arg1, arg2) 2 CONCAT_WS(' ', `arg1`, `arg2`) paste(arg1) 1 CONCAT_WS(' ', `arg1`) paste0() 0 CONCAT_WS('') paste0(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 CONCAT_WS('', `arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) paste0(arg1, arg2, arg3) 3 CONCAT_WS('', `arg1`, `arg2`, `arg3`) paste0(arg1, arg2) 2 CONCAT_WS('', `arg1`, `arg2`) paste0(arg1) 1 CONCAT_WS('', `arg1`) percent_rank() 0 percent_rank() OVER () percent_rank(arg1) 1 percent_rank() OVER (ORDER BY `arg1`) pmax() 0 MAX() pmax(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 MAX(`arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) pmax(arg1, arg2, arg3) 3 MAX(`arg1`, `arg2`, `arg3`) pmax(arg1, arg2) 2 MAX(`arg1`, `arg2`) pmax(arg1) 1 MAX(`arg1`) pmin() 0 MIN() pmin(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 MIN(`arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) pmin(arg1, arg2, arg3) 3 MIN(`arg1`, `arg2`, `arg3`) pmin(arg1, arg2) 2 MIN(`arg1`, `arg2`) pmin(arg1) 1 MIN(`arg1`) rank() 0 rank() OVER () rank(arg1) 1 rank() OVER (ORDER BY `arg1`) round(arg1, arg2) 2 ROUND((`arg1`) :: numeric, NULL) round(arg1) 1 ROUND((`arg1`) :: numeric, 0) row_number() 0 row_number() OVER () row_number(arg1) 1 row_number() OVER (ORDER BY `arg1`) sd(arg1, arg2) 2 stddev_samp(`arg1`) OVER () sd(arg1) 1 stddev_samp(`arg1`) OVER () sign(arg1) 1 SIGN(`arg1`) sin(arg1) 1 SIN(`arg1`) sinh(arg1) 1 SINH(`arg1`) sql(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 `arg1` sql(arg1, arg2, arg3) 3 `arg1` sql(arg1, arg2) 2 `arg1` sql(arg1) 1 `arg1` sqrt(arg1) 1 SQRT(`arg1`) str_detect(arg1, arg2) 2 STRPOS(`arg1`, `arg2`) &gt; 0 str_flatten(arg1, arg2) 2 STRING_AGG(`arg1`, `arg2`) OVER () str_length() 0 LENGTH() str_length(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 LENGTH(`arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) str_length(arg1, arg2, arg3) 3 LENGTH(`arg1`, `arg2`, `arg3`) str_length(arg1, arg2) 2 LENGTH(`arg1`, `arg2`) str_length(arg1) 1 LENGTH(`arg1`) str_locate(arg1, arg2) 2 STRPOS(`arg1`, `arg2`) str_replace_all(arg1, arg2, arg3) 3 REPLACE(`arg1`, `arg2`, `arg3`) str_to_lower() 0 LOWER() str_to_lower(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 LOWER(`arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) str_to_lower(arg1, arg2, arg3) 3 LOWER(`arg1`, `arg2`, `arg3`) str_to_lower(arg1, arg2) 2 LOWER(`arg1`, `arg2`) str_to_lower(arg1) 1 LOWER(`arg1`) str_to_upper() 0 UPPER() str_to_upper(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50) 50 UPPER(`arg1`, `arg2`, `arg3`, `arg4`, `arg5`, `arg6`, `arg7`, `arg8`, `arg9`, `arg10`, `arg11`, `arg12`, `arg13`, `arg14`, `arg15`, `arg16`, `arg17`, `arg18`, `arg19`, `arg20`, `arg21`, `arg22`, `arg23`, `arg24`, `arg25`, `arg26`, `arg27`, `arg28`, `arg29`, `arg30`, `arg31`, `arg32`, `arg33`, `arg34`, `arg35`, `arg36`, `arg37`, `arg38`, `arg39`, `arg40`, `arg41`, `arg42`, `arg43`, `arg44`, `arg45`, `arg46`, `arg47`, `arg48`, `arg49`, `arg50`) str_to_upper(arg1, arg2, arg3) 3 UPPER(`arg1`, `arg2`, `arg3`) str_to_upper(arg1, arg2) 2 UPPER(`arg1`, `arg2`) str_to_upper(arg1) 1 UPPER(`arg1`) str_trim(arg1, arg2) 2 ((`arg1`)) str_trim(arg1) 1 LTRIM(RTRIM(`arg1`)) sum(arg1, arg2) 2 sum(`arg1`) OVER () sum(arg1) 1 sum(`arg1`) OVER () tan(arg1) 1 TAN(`arg1`) tanh(arg1) 1 TANH(`arg1`) tolower(arg1) 1 LOWER(`arg1`) toupper(arg1) 1 UPPER(`arg1`) trimws(arg1) 1 TRIM(`arg1`) var(arg1, arg2) 2 var_samp(`arg1`) OVER () var(arg1) 1 var_samp(`arg1`) OVER () xor(arg1, arg2) 2 `arg1` OR `arg2` AND NOT (`arg1` AND `arg2`) "]
]
